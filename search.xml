<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js防抖节流</title>
      <link href="/2020/08/13/js-debounce-throttle/"/>
      <url>/2020/08/13/js-debounce-throttle/</url>
      
        <content type="html"><![CDATA[<h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><h4 id="触发事件后必须等待一个delay才能执行，频繁触发只会重置等待时间。"><a href="#触发事件后必须等待一个delay才能执行，频繁触发只会重置等待时间。" class="headerlink" title="触发事件后必须等待一个delay才能执行，频繁触发只会重置等待时间。"></a>触发事件后必须等待一个delay才能执行，频繁触发只会重置等待时间。</h4><p><img src="/" class="lazyload" data-src="debounce.gif"  alt=""></p><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>);</span><br><span class="line">   <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将this绑定到input上，并传递参数</span></span><br><span class="line">   input.onkeyup= debounce(show, <span class="number">1000</span>).bind(input,<span class="string">',hello'</span>,<span class="string">',world'</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">arg1,arg2</span>) </span>&#123;</span><br><span class="line">       content.innerHTML+=<span class="keyword">this</span>.value+arg1+arg2+<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func,delay</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> timer;</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(timer)</span><br><span class="line">               clearTimeout(timer);</span><br><span class="line">           timer= setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">               func.call(<span class="keyword">this</span>,...arguments);</span><br><span class="line">           &#125;,delay);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h1><h4 id="允许你频繁触发事件，但只会按设定的节奏（delay周期）来执行事件。"><a href="#允许你频繁触发事件，但只会按设定的节奏（delay周期）来执行事件。" class="headerlink" title="允许你频繁触发事件，但只会按设定的节奏（delay周期）来执行事件。"></a>允许你频繁触发事件，但只会按设定的节奏（delay周期）来执行事件。</h4><p><img src="/" class="lazyload" data-src="throttle.gif"  alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span><br><span class="line"></span><br><span class="line">input.onkeypress= throttle(show,<span class="number">1000</span>).bind(input,<span class="string">'world'</span>);  <span class="comment">//注意，这里 keypress 事件才支持一直按</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    content.innerHTML+=<span class="string">"hello,"</span>+arg+<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func,delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!timer)&#123;            <span class="comment">//必须确保上一次定时器执行完毕</span></span><br><span class="line">            timer = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                func.call(<span class="keyword">this</span>,...arguments);</span><br><span class="line">                timer=<span class="literal">null</span>;    <span class="comment">//及时清理，表示执行完毕，clearTimeout后timer仍有值！！！画重点！！！</span></span><br><span class="line">            &#125;,delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack官方指南学习笔记</title>
      <link href="/2020/08/12/webpack/"/>
      <url>/2020/08/12/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-demo &amp;&amp; <span class="built_in">cd</span> webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webpack-demo</span><br><span class="line">|- package.json</span><br><span class="line">|- /dist</span><br><span class="line">  |- index.html</span><br><span class="line">|- /src</span><br><span class="line">  |- index.js</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "name": "webpack-demo",</span><br><span class="line"><span class="addition">+   "private": true,//防止意外发布重要私密库</span></span><br><span class="line"><span class="deletion">-   "main": "index.js",//入口起点名</span></span><br><span class="line">    "scripts": &#123;</span><br><span class="line">      "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line"><span class="addition">+     "build": "webpack"//npm run build 相当于 npx webpack --config webpack.config.js</span></span><br><span class="line">    &#125;,</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">      "webpack": "^4.0.1",</span><br><span class="line">      "webpack-cli": "^2.0.9"</span><br><span class="line">    &#125;,</span><br><span class="line">    "dependencies": &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-config-js配置文件"><a href="#webpack-config-js配置文件" class="headerlink" title="webpack.config.js配置文件"></a>webpack.config.js配置文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="管理资源文件"><a href="#管理资源文件" class="headerlink" title="管理资源文件"></a>管理资源文件</h1><h2 id="加载CSS"><a href="#加载CSS" class="headerlink" title="加载CSS"></a>加载CSS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: './src/index.js',</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: 'bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+   module: &#123;</span></span><br><span class="line"><span class="addition">+     rules: [</span></span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         test: /\.css$/,</span></span><br><span class="line"><span class="addition">+         use: [</span></span><br><span class="line"><span class="addition">+           'style-loader',</span></span><br><span class="line"><span class="addition">+           'css-loader'</span></span><br><span class="line"><span class="addition">+         ]</span></span><br><span class="line"><span class="addition">+       &#125;</span></span><br><span class="line"><span class="addition">+     ]</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="加载图片、字体、CSV、XML文件"><a href="#加载图片、字体、CSV、XML文件" class="headerlink" title="加载图片、字体、CSV、XML文件"></a>加载图片、字体、CSV、XML文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: './src/index.js',</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: 'bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         test: /\.(png|svg|jpg|gif)$/,//图片</span></span><br><span class="line"><span class="addition">+         use: [</span></span><br><span class="line"><span class="addition">+           'file-loader'</span></span><br><span class="line"><span class="addition">+         ]</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         test: /\.(woff|woff2|eot|ttf|otf)$/,//字体</span></span><br><span class="line"><span class="addition">+         use: [</span></span><br><span class="line"><span class="addition">+           'file-loader'</span></span><br><span class="line"><span class="addition">+         ]</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         test: /\.(csv|tsv)$/,//csv</span></span><br><span class="line"><span class="addition">+         use: [</span></span><br><span class="line"><span class="addition">+           'csv-loader'</span></span><br><span class="line"><span class="addition">+         ]</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         test: /\.xml$/,//xml</span></span><br><span class="line"><span class="addition">+         use: [</span></span><br><span class="line"><span class="addition">+           'xml-loader'</span></span><br><span class="line"><span class="addition">+         ]</span></span><br><span class="line"><span class="addition">+       &#125;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h1 id="管理输出"><a href="#管理输出" class="headerlink" title="管理输出"></a>管理输出</h1><h2 id="配置-entry-分离入口起点"><a href="#配置-entry-分离入口起点" class="headerlink" title="配置 entry 分离入口起点"></a>配置 <a href="https://www.webpackjs.com/configuration/entry-context" target="_blank" rel="noopener"><code>entry</code></a> 分离入口起点</h2><h3 id="webpack-config-js-2"><a href="#webpack-config-js-2" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line"><span class="deletion">-   entry: './src/index.js',</span></span><br><span class="line"><span class="addition">+   entry: &#123;</span></span><br><span class="line"><span class="addition">+     app: './src/index.js',</span></span><br><span class="line"><span class="addition">+     print: './src/print.js'</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">    output: &#123;</span><br><span class="line"><span class="deletion">-     filename: 'bundle.js',</span></span><br><span class="line"><span class="addition">+     filename: '[name].bundle.js',</span></span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><h3 id="解决痛点："><a href="#解决痛点：" class="headerlink" title="解决痛点："></a>解决痛点：</h3><h4 id="如果更改了一个入口起点的名称，或添加了一个新的名称，生成的包将被重命名在一个构建中，但是index-html文件仍然会引用旧的名字，需要手动配置。"><a href="#如果更改了一个入口起点的名称，或添加了一个新的名称，生成的包将被重命名在一个构建中，但是index-html文件仍然会引用旧的名字，需要手动配置。" class="headerlink" title="如果更改了一个入口起点的名称，或添加了一个新的名称，生成的包将被重命名在一个构建中，但是index.html文件仍然会引用旧的名字，需要手动配置。"></a>如果更改了一个入口起点的名称，或添加了一个新的名称，生成的包将被重命名在一个构建中，但是<code>index.html</code>文件仍然会引用旧的名字，需要手动配置。</h4><h4 id="使用HtmlWebpackPlugin-生成-index-html，会自动添加所有-bundle。"><a href="#使用HtmlWebpackPlugin-生成-index-html，会自动添加所有-bundle。" class="headerlink" title="使用HtmlWebpackPlugin 生成 index.html，会自动添加所有 bundle。"></a>使用<code>HtmlWebpackPlugin</code> 生成 index.html，会自动添加所有 bundle。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js-3"><a href="#webpack-config-js-3" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: './src/index.js',</span><br><span class="line">      print: './src/print.js'</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+   plugins: [</span></span><br><span class="line"><span class="addition">+     new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+       title: 'Output Management'</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line"><span class="addition">+   ],</span></span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="clean-webpack-plugin-清理-dist-文件夹"><a href="#clean-webpack-plugin-清理-dist-文件夹" class="headerlink" title="clean-webpack-plugin 清理 /dist 文件夹"></a>clean-webpack-plugin 清理 <code>/dist</code> 文件夹</h2><h3 id="每次构建前清理-dist-文件夹"><a href="#每次构建前清理-dist-文件夹" class="headerlink" title="每次构建前清理 /dist 文件夹"></a>每次构建前清理 <code>/dist</code> 文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js-4"><a href="#webpack-config-js-4" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"><span class="addition">+ const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span></span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: './src/index.js',</span><br><span class="line">      print: './src/print.js'</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line"><span class="addition">+     new CleanWebpackPlugin(),</span></span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Output Management'</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h1 id="开发环境调试"><a href="#开发环境调试" class="headerlink" title="开发环境调试"></a>开发环境调试</h1><h2 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h2><h3 id="解决痛点：-1"><a href="#解决痛点：-1" class="headerlink" title="解决痛点："></a>解决痛点：</h3><p>​    当 webpack 打包源代码时，可能会很难追踪到错误和警告在源代码中的原始位置。例如，如果将三个源文件（<code>a.js</code>, <code>b.js</code> 和 <code>c.js</code>）打包到一个 bundle（<code>bundle.js</code>）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会简单地指向到 <code>bundle.js</code>，而实际需要准确地知道错误来自于哪个源文件。</p><h4 id="source-map-可将编译后的代码映射回原始源代码，准确反馈错误源文件。"><a href="#source-map-可将编译后的代码映射回原始源代码，准确反馈错误源文件。" class="headerlink" title="source map 可将编译后的代码映射回原始源代码，准确反馈错误源文件。"></a><a href="http://blog.teamtreehouse.com/introduction-source-maps" target="_blank" rel="noopener">source map</a> 可将编译后的代码映射回原始源代码，准确反馈错误源文件。</h4><h3 id="webpack-config-js-5"><a href="#webpack-config-js-5" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">  const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: './src/index.js',</span><br><span class="line">      print: './src/print.js'</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+   devtool: 'inline-source-map',</span></span><br><span class="line">    plugins: [</span><br><span class="line">      new CleanWebpackPlugin(),</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Development'</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="热加载模式"><a href="#热加载模式" class="headerlink" title="热加载模式"></a>热加载模式</h2><p>webpack 中有三个热加载模式，帮助你在代码发生变化后自动编译代码：</p><ol><li>webpack’s Watch Mode（需要手动刷新浏览器）</li><li>webpack-dev-server（实时重新加载页面 live reloading）</li><li>webpack-dev-middleware</li></ol><h3 id="webpack’s-Watch-Mode"><a href="#webpack’s-Watch-Mode" class="headerlink" title="webpack’s Watch Mode"></a>webpack’s Watch Mode</h3><h4 id="（需要手动刷新浏览器）"><a href="#（需要手动刷新浏览器）" class="headerlink" title="（需要手动刷新浏览器）"></a>（需要手动刷新浏览器）</h4><h4 id="添加一个用于启动-webpack-的观察模式的-npm-script-脚本："><a href="#添加一个用于启动-webpack-的观察模式的-npm-script-脚本：" class="headerlink" title="添加一个用于启动 webpack 的观察模式的 npm script 脚本："></a>添加一个用于启动 webpack 的观察模式的 npm script 脚本：</h4><h4 id="package-json-1"><a href="#package-json-1" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "name": "development",</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">      "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line"><span class="addition">+     "watch": "webpack --watch",</span></span><br><span class="line">      "build": "webpack"//npm run build 相当于 npx webpack --config webpack.config.js</span><br><span class="line">    &#125;,</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">      "clean-webpack-plugin": "^0.1.16",</span><br><span class="line">      "html-webpack-plugin": "^2.29.0",</span><br><span class="line">      "webpack": "^3.0.0",</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="修改clean-webpack-plugin设置"><a href="#修改clean-webpack-plugin设置" class="headerlink" title="修改clean-webpack-plugin设置"></a>修改clean-webpack-plugin设置</h4><h5 id="Watch模式下，防止误删未变更的index-html"><a href="#Watch模式下，防止误删未变更的index-html" class="headerlink" title="Watch模式下，防止误删未变更的index.html"></a>Watch模式下，防止误删未变更的index.html</h5><p><a href="https://blog.csdn.net/qq_40285497/article/details/106401423" target="_blank" rel="noopener">https://blog.csdn.net/qq_40285497/article/details/106401423</a></p><h5 id="webpack-config-js-6"><a href="#webpack-config-js-6" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">  const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: './src/index.js',</span><br><span class="line">      print: './src/print.js'</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line"><span class="addition">+     new CleanWebpackPlugin(&#123;cleanStaleWebpackAssets: false&#125;),</span></span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Output Management'</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><h4 id="（实时重新加载页面-live-reloading）"><a href="#（实时重新加载页面-live-reloading）" class="headerlink" title="（实时重新加载页面 live reloading）"></a>（实时重新加载页面 live reloading）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><h4 id="以下配置告知-webpack-dev-server，在-localhost-8080-下建立服务，将-dist-目录下的文件，作为可访问文件"><a href="#以下配置告知-webpack-dev-server，在-localhost-8080-下建立服务，将-dist-目录下的文件，作为可访问文件" class="headerlink" title="以下配置告知 webpack-dev-server，在 localhost:8080 下建立服务，将 dist 目录下的文件，作为可访问文件"></a>以下配置告知 <code>webpack-dev-server</code>，在 <code>localhost:8080</code> 下建立服务，将 <code>dist</code> 目录下的文件，作为可访问文件</h4><h4 id="webpack-config-js-7"><a href="#webpack-config-js-7" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">  const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: './src/index.js',</span><br><span class="line">      print: './src/print.js'</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: 'inline-source-map',</span><br><span class="line"><span class="addition">+   devServer: &#123;</span></span><br><span class="line"><span class="addition">+     contentBase: './dist'</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">    plugins: [</span><br><span class="line">      new CleanWebpackPlugin(),</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Development'</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="添加-运行开发服务器-dev-server-script-脚本"><a href="#添加-运行开发服务器-dev-server-script-脚本" class="headerlink" title="添加 运行开发服务器(dev server)  script 脚本"></a>添加 运行开发服务器(dev server)  script 脚本</h4><h5 id="package-json-2"><a href="#package-json-2" class="headerlink" title="package.json"></a>package.json</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "name": "development",</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">      "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">      "watch": "webpack --watch",</span><br><span class="line"><span class="addition">+     "start": "webpack-dev-server --open",</span></span><br><span class="line">      "build": "webpack"</span><br><span class="line">    &#125;,</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">      "clean-webpack-plugin": "^0.1.16",</span><br><span class="line">      "html-webpack-plugin": "^2.29.0",</span><br><span class="line">      "webpack": "^3.0.0",</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h3><p>​        <code>webpack-dev-middleware</code> 是一个容器(wrapper)，可以把 webpack 处理后的文件传递给一个服务器(server)。 <code>webpack-dev-server</code> 在内部使用了它，同时，它也可以作为一个单独的包来使用，以便进行更多自定义设置来实现更多的需求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev express webpack-dev-middleware</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js-8"><a href="#webpack-config-js-8" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">  const CleanWebpackPlugin = require('clean-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      app: './src/index.js',</span><br><span class="line">      print: './src/print.js'</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: 'inline-source-map',</span><br><span class="line">    plugins: [</span><br><span class="line">      new CleanWebpackPlugin(['dist']),</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Output Management'</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist'),</span><br><span class="line"><span class="addition">+     publicPath: '/'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p><code>publicPath</code> 也会在服务器脚本用到，以确保文件资源能够在 <code>http://localhost:3000</code> 下正确访问</p><h4 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span></span><br><span class="line"><span class="comment">// configuration file as a base.</span></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class="line">  publicPath: config.output.publicPath</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serve the files on port 3000.</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!\n'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="添加-npm-script-脚本"><a href="#添加-npm-script-脚本" class="headerlink" title="添加 npm script 脚本"></a>添加 npm script 脚本</h4><h5 id="package-json-3"><a href="#package-json-3" class="headerlink" title="package.json"></a>package.json</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "name": "development",</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">      "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">      "watch": "webpack --watch",</span><br><span class="line">      "start": "webpack-dev-server --open",</span><br><span class="line"><span class="addition">+     "server": "node server.js",</span></span><br><span class="line">      "build": "webpack"</span><br><span class="line">    &#125;,</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">      "clean-webpack-plugin": "^0.1.16",</span><br><span class="line">      "html-webpack-plugin": "^2.29.0",</span><br><span class="line">      "webpack": "^3.0.0",</span><br><span class="line">      "webpack-dev-middleware": "^1.12.0",</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="模块热替换（HMR）"><a href="#模块热替换（HMR）" class="headerlink" title="模块热替换（HMR）"></a>模块热替换（HMR）</h1><h2 id="（更改模块不需要重新加载页面-live-reloading）"><a href="#（更改模块不需要重新加载页面-live-reloading）" class="headerlink" title="（更改模块不需要重新加载页面 live reloading）"></a>（更改模块不需要重新加载页面 live reloading）</h2><h3 id="在-webpack-dev-server-的配置基础上，使用-webpack-内置的-HMR-插件"><a href="#在-webpack-dev-server-的配置基础上，使用-webpack-内置的-HMR-插件" class="headerlink" title="在 webpack-dev-server 的配置基础上，使用 webpack 内置的 HMR 插件"></a>在 <a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="noopener">webpack-dev-server</a> 的配置基础上，使用 webpack 内置的 HMR 插件</h3><h4 id="webpack-config-js-9"><a href="#webpack-config-js-9" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line">  const CleanWebpackPlugin = require('clean-webpack-plugin');</span><br><span class="line"><span class="addition">+ const webpack = require('webpack');</span></span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line"><span class="deletion">-      app: './src/index.js',</span></span><br><span class="line"><span class="deletion">-      print: './src/print.js'</span></span><br><span class="line"><span class="addition">+      app: './src/index.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: 'inline-source-map',</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      contentBase: './dist',</span><br><span class="line"><span class="addition">+     hot: true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      new CleanWebpackPlugin(['dist']),</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Hot Module Replacement'</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="addition">+     new webpack.NamedModulesPlugin(),</span></span><br><span class="line"><span class="addition">+     new webpack.HotModuleReplacementPlugin()</span></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="NamedModulesPlugin-作用是在热加载时直接返回更新文件名，而不是文件的id"><a href="#NamedModulesPlugin-作用是在热加载时直接返回更新文件名，而不是文件的id" class="headerlink" title="NamedModulesPlugin 作用是在热加载时直接返回更新文件名，而不是文件的id"></a><code>NamedModulesPlugin</code> 作用是在热加载时直接返回更新文件名，而不是文件的id</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[HMR] Updated modules:</span><br><span class="line">[HMR]  - ./example.js</span><br><span class="line">[HMR]  - ./hmr.js</span><br><span class="line">[HMR] Update applied.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[HMR] Updated modules:</span><br><span class="line">[HMR]  - 39</span><br><span class="line">[HMR]  - 40</span><br><span class="line">[HMR] Update applied.</span><br></pre></td></tr></table></figure><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  import printMe from './print.js';</span><br><span class="line"></span><br><span class="line">  function component() &#123;</span><br><span class="line">    var btn = document.createElement('button');</span><br><span class="line"></span><br><span class="line">    btn.innerHTML = 'Click me and check the console!';</span><br><span class="line">    btn.onclick = printMe;</span><br><span class="line"></span><br><span class="line">    element.appendChild(btn);</span><br><span class="line"></span><br><span class="line">    return element;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  document.body.appendChild(component());</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+ if (module.hot) &#123;</span></span><br><span class="line"><span class="addition">+   module.hot.accept('./print.js', function() &#123;</span></span><br><span class="line"><span class="addition">+     console.log('Accepting the updated printMe module!');</span></span><br><span class="line"><span class="addition">+     printMe();</span></span><br><span class="line"><span class="addition">+   &#125;)</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><h3 id="存在问题（需要重新绑定模块）"><a href="#存在问题（需要重新绑定模块）" class="headerlink" title="存在问题（需要重新绑定模块）"></a>存在问题（需要重新绑定模块）</h3><p>​        如果更新后点击示例页面上的按钮，会发现控制台仍在打印旧的 <code>printMe</code> 功能。这是因为按钮的 <code>onclick</code> 事件仍然绑定在旧的 <code>printMe</code> 函数上，需要使用 <code>module.hot.accept</code> 更新绑定到新的 <code>printMe</code> 函数上。</p><p><strong>index.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  import printMe from './print.js';</span><br><span class="line"></span><br><span class="line">  function component() &#123;</span><br><span class="line">    var btn = document.createElement('button');</span><br><span class="line"></span><br><span class="line">    btn.innerHTML = 'Click me and check the console!';</span><br><span class="line">    btn.onclick = printMe;  // onclick 事件绑定原始的 printMe 函数上</span><br><span class="line"></span><br><span class="line">    element.appendChild(btn);</span><br><span class="line"></span><br><span class="line">    return element;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- document.body.appendChild(component());</span></span><br><span class="line"><span class="addition">+ let element = component(); // 当 print.js 改变导致页面重新渲染时，重新获取渲染的元素</span></span><br><span class="line"><span class="addition">+ document.body.appendChild(element);</span></span><br><span class="line"></span><br><span class="line">  if (module.hot) &#123;</span><br><span class="line">    module.hot.accept('./print.js', function() &#123;</span><br><span class="line">      console.log('Accepting the updated printMe module!');</span><br><span class="line"><span class="deletion">-     printMe();</span></span><br><span class="line"><span class="addition">+     document.body.removeChild(element);</span></span><br><span class="line"><span class="addition">+     element = component(); // 重新渲染页面后，component 更新 click 事件处理</span></span><br><span class="line"><span class="addition">+     document.body.appendChild(element);</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="HMR-修改样式表"><a href="#HMR-修改样式表" class="headerlink" title="HMR 修改样式表"></a>HMR 修改样式表</h2><p>​        当更新 CSS 依赖模块时， <code>style-loader</code> 自动在后台使用 <code>module.hot.accept</code> 来修补(patch) <code>&lt;style&gt;</code> 标签，正常添加style-loader、css-loader插件即可。</p><h1 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h1><h3 id="用于移除-JavaScript-上下文中的未引用代码-dead-code"><a href="#用于移除-JavaScript-上下文中的未引用代码-dead-code" class="headerlink" title="用于移除 JavaScript 上下文中的未引用代码(dead-code)"></a>用于移除 JavaScript 上下文中的未引用代码(dead-code)</h3><h2 id="将文件标记为无副作用-side-effect-free"><a href="#将文件标记为无副作用-side-effect-free" class="headerlink" title="将文件标记为无副作用(side-effect-free)"></a>将文件标记为无副作用(side-effect-free)</h2><p>​        <a href="https://babeljs.io/learn-es2015/" target="_blank" rel="noopener">ES2015</a> 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener"><code>import</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noopener"><code>export</code></a> 语句已经被标准化，webpack 不会更改代码中除 <code>import</code> 和 <code>export</code> 语句以外的部分。</p><p>​        在一个纯粹的 ESM 模块世界中，识别出哪些文件有副作用很简单。然而，通常项目无法达到这种纯度。此时有必要向 webpack 的 compiler 提供提示，表明项目中的哪些文件是 “pure(纯的 ES2015 模块)”，由此可以安全地删除文件中未使用的部分。</p><h3 id="所有代码都不包含副作用"><a href="#所有代码都不包含副作用" class="headerlink" title="所有代码都不包含副作用"></a>所有代码都不包含副作用</h3><h4 id="package-json-4"><a href="#package-json-4" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"your-project"</span>,</span><br><span class="line">  <span class="attr">"sideEffects"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="副作用黑名单（不进行tree-shaking操作）"><a href="#副作用黑名单（不进行tree-shaking操作）" class="headerlink" title="副作用黑名单（不进行tree shaking操作）"></a>副作用黑名单（不进行tree shaking操作）</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"your-project"</span>,</span><br><span class="line">  <span class="attr">"sideEffects"</span>: [</span><br><span class="line">    <span class="string">"./src/some-side-effectful-file.js"</span>,</span><br><span class="line">    <span class="string">"*.css"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见副作用模块：全局样式表、全局配置的 js 文件</p><p>全局 CSS 是直接导入到 JavaScript 文件中的样式表，它没有被转换成 CSS 模块或任何类似的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./MyStylesheet.css'</span>;</span><br></pre></td></tr></table></figure><p>以上述方式导入的任何样式表，被 webpack 视为死代码，从输出中删除，需要设置黑名单。</p><h2 id="压缩输出"><a href="#压缩输出" class="headerlink" title="压缩输出"></a>压缩输出</h2><h3 id="生产模式"><a href="#生产模式" class="headerlink" title="生产模式"></a>生产模式</h3><h4 id="代码压缩（去除空格、缩短变量名）-tree-shaking（移除未引用代码）"><a href="#代码压缩（去除空格、缩短变量名）-tree-shaking（移除未引用代码）" class="headerlink" title="代码压缩（去除空格、缩短变量名）+ tree shaking（移除未引用代码）"></a>代码压缩（去除空格、缩短变量名）+ tree shaking（移除未引用代码）</h4><h5 id="webpack-config-js-10"><a href="#webpack-config-js-10" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const path = require('path');</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: './src/index.js',</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: 'bundle.js',</span><br><span class="line">    path: path.resolve(__dirname, 'dist')</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="addition">+ mode: "production"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h3><h4 id="未压缩便于调试"><a href="#未压缩便于调试" class="headerlink" title="未压缩便于调试"></a>未压缩便于调试</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: "development"</span><br></pre></td></tr></table></figure><h1 id="通用、生产、开发环境配置分离"><a href="#通用、生产、开发环境配置分离" class="headerlink" title="通用、生产、开发环境配置分离"></a>通用、生产、开发环境配置分离</h1><p>​        在<em>开发环境</em>中，需要具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。而在<em>生产环境</em>中，目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。使用<code>webpack-merge</code>为每个环境编写<strong>彼此独立的 webpack 配置</strong>，同时遵循不重复原则，保留一个“通用”配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-merge</span><br></pre></td></tr></table></figure><h4 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line"><span class="deletion">- |- webpack.config.js</span></span><br><span class="line"><span class="addition">+ |- webpack.common.js</span></span><br><span class="line"><span class="addition">+ |- webpack.dev.js</span></span><br><span class="line"><span class="addition">+ |- webpack.prod.js</span></span><br><span class="line">  |- /dist</span><br><span class="line">  |- /src</span><br><span class="line">    |- index.js</span><br><span class="line">    |- math.js</span><br><span class="line">  |- /node_modules</span><br></pre></td></tr></table></figure><h4 id="webpack-common-js"><a href="#webpack-common-js" class="headerlink" title="webpack.common.js"></a>webpack.common.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const path = require('path');</span></span><br><span class="line"><span class="addition">+ const &#123; CleanWebpackPlugin &#125; = require('clean-webpack-plugin');</span></span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require('html-webpack-plugin');</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+ module.exports = &#123;</span></span><br><span class="line"><span class="addition">+   entry: &#123;</span></span><br><span class="line"><span class="addition">+     app: './src/index.js'</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line"><span class="addition">+   plugins: [</span></span><br><span class="line"><span class="addition">+     new CleanWebpackPlugin(),</span></span><br><span class="line"><span class="addition">+     new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+       title: 'Production'</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line"><span class="addition">+   ],</span></span><br><span class="line"><span class="addition">+   output: &#123;</span></span><br><span class="line"><span class="addition">+     filename: '[name].bundle.js',</span></span><br><span class="line"><span class="addition">+     path: path.resolve(__dirname, 'dist')</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"><span class="addition">+ &#125;;</span></span><br></pre></td></tr></table></figure><h4 id="webpack-dev-js"><a href="#webpack-dev-js" class="headerlink" title="webpack.dev.js"></a>webpack.dev.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const merge = require('webpack-merge');</span></span><br><span class="line"><span class="addition">+ const common = require('./webpack.common.js');</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+ module.exports = merge(common, &#123;</span></span><br><span class="line"><span class="addition">+   devtool: 'inline-source-map',</span></span><br><span class="line"><span class="addition">+   devServer: &#123;</span></span><br><span class="line"><span class="addition">+     contentBase: './dist'</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"><span class="addition">+ &#125;);</span></span><br></pre></td></tr></table></figure><h4 id="webpack-prod-js"><a href="#webpack-prod-js" class="headerlink" title="webpack.prod.js"></a>webpack.prod.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const merge = require('webpack-merge');</span></span><br><span class="line"><span class="addition">+ const UglifyJSPlugin = require('uglifyjs-webpack-plugin');</span></span><br><span class="line"><span class="addition">+ const common = require('./webpack.common.js');</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+ module.exports = merge(common, &#123;</span></span><br><span class="line"><span class="addition">+   plugins: [</span></span><br><span class="line"><span class="addition">+     new UglifyJSPlugin()</span></span><br><span class="line"><span class="addition">+   ]</span></span><br><span class="line"><span class="addition">+ &#125;);</span></span><br></pre></td></tr></table></figure><h3 id="NPM-Scripts"><a href="#NPM-Scripts" class="headerlink" title="NPM Scripts"></a>NPM Scripts</h3><h5 id="package-json-5"><a href="#package-json-5" class="headerlink" title="package.json"></a>package.json</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    "scripts": &#123;</span><br><span class="line"><span class="deletion">-     "start": "webpack-dev-server --open",</span></span><br><span class="line"><span class="addition">+     "start": "webpack-dev-server --open --config webpack.dev.js",</span></span><br><span class="line"><span class="deletion">-     "build": "webpack"</span></span><br><span class="line"><span class="addition">+     "build": "webpack --config webpack.prod.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">      "clean-webpack-plugin": "^0.1.17",</span><br><span class="line">      "html-webpack-plugin": "^2.29.0",</span><br><span class="line">      "webpack": "^3.0.0",</span><br><span class="line">      "webpack-dev-server": "^2.9.1",</span><br><span class="line">      "webpack-merge": "^4.1.0",</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="NODE-ENV系统环境变量"><a href="#NODE-ENV系统环境变量" class="headerlink" title="NODE_ENV系统环境变量"></a>NODE_ENV系统环境变量</h2><p><code>NODE_ENV</code> <em>是一个由 Node.js 暴露给执行脚本的系统环境变量。通常用于决定在开发环境与生产环境(dev-vs-prod)下，服务器工具、构建脚本和客户端 library 的行为。</em></p><p><strong>webpack.prod.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const webpack = require('webpack');</span></span><br><span class="line">  const merge = require('webpack-merge');</span><br><span class="line">  const UglifyJSPlugin = require('uglifyjs-webpack-plugin');</span><br><span class="line">  const common = require('./webpack.common.js');</span><br><span class="line"></span><br><span class="line">  module.exports = merge(common, &#123;</span><br><span class="line">    devtool: 'source-map',</span><br><span class="line">    plugins: [</span><br><span class="line">      new UglifyJSPlugin(&#123;</span><br><span class="line">        sourceMap: true</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="addition">+     new webpack.DefinePlugin(&#123;</span></span><br><span class="line"><span class="addition">+       'process.env.NODE_ENV': JSON.stringify('production')</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="任何位于-src-的本地代码都可以关联到-process-env-NODE-ENV-环境变量"><a href="#任何位于-src-的本地代码都可以关联到-process-env-NODE-ENV-环境变量" class="headerlink" title="任何位于 /src 的本地代码都可以关联到 process.env.NODE_ENV 环境变量"></a>任何位于 <code>/src</code> 的本地代码都可以关联到 process.env.NODE_ENV 环境变量</h4><h5 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ if (process.env.NODE_ENV !== 'production') &#123;</span></span><br><span class="line"><span class="addition">+   console.log('Looks like we are in development mode!');</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><h1 id="代码分离"><a href="#代码分离" class="headerlink" title="代码分离"></a>代码分离</h1><p>​        把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，按需加载或并行加载，控制资源加载优先级，如果使用合理，会极大影响加载时间。</p><h4 id="三种常用的代码分离方法："><a href="#三种常用的代码分离方法：" class="headerlink" title="三种常用的代码分离方法："></a>三种常用的代码分离方法：</h4><ul><li>入口起点：使用 <a href="https://www.webpackjs.com/configuration/entry-context" target="_blank" rel="noopener"><code>entry</code></a> 配置手动地分离代码。</li><li>防止重复：使用 <a href="https://www.webpackjs.com/plugins/commons-chunk-plugin" target="_blank" rel="noopener"><code>CommonsChunkPlugin</code></a> 去重和分离 chunk。</li><li>动态导入：通过模块的内联函数调用来分离代码。</li></ul><h2 id="入口起点-entry-points"><a href="#入口起点-entry-points" class="headerlink" title="入口起点(entry points)"></a>入口起点(entry points)</h2><h5 id="project"><a href="#project" class="headerlink" title="project"></a>project</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpack-demo</span><br><span class="line">|- package.json</span><br><span class="line">|- webpack.config.js</span><br><span class="line">|- /dist</span><br><span class="line">|- /src</span><br><span class="line">  |- index.js</span><br><span class="line"><span class="addition">+ |- another-module.js</span></span><br><span class="line">|- /node_modules</span><br></pre></td></tr></table></figure><h5 id="another-module-js"><a href="#another-module-js" class="headerlink" title="another-module.js"></a>another-module.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  _.join([<span class="string">'Another'</span>, <span class="string">'module'</span>, <span class="string">'loaded!'</span>], <span class="string">' '</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="webpack-config-js-11"><a href="#webpack-config-js-11" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    another: <span class="string">'./src/another-module.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Code Splitting'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="构建结果："><a href="#构建结果：" class="headerlink" title="构建结果："></a>构建结果：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">            Asset    Size  Chunks                    Chunk Names</span><br><span class="line">  index.bundle.js  544 kB       0  [emitted]  [big]  index</span><br><span class="line">another.bundle.js  544 kB       1  [emitted]  [big]  another</span><br></pre></td></tr></table></figure><h5 id="index-js和another-module-js都含有lodash模块"><a href="#index-js和another-module-js都含有lodash模块" class="headerlink" title="index.js和another-module.js都含有lodash模块"></a><code>index.js</code>和<code>another-module.js</code>都含有<code>lodash</code>模块</h5><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。</li><li>这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。</li></ul><h2 id="防止重复-prevent-duplication"><a href="#防止重复-prevent-duplication" class="headerlink" title="防止重复(prevent duplication)"></a>防止重复(prevent duplication)</h2><p>​        <a href="https://www.webpackjs.com/plugins/commons-chunk-plugin" target="_blank" rel="noopener"><code>CommonsChunkPlugin</code></a> 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。</p><h4 id="webpack-config-js-12"><a href="#webpack-config-js-12" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line"><span class="addition">+ const webpack = require('webpack');</span></span><br><span class="line">  const HTMLWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      index: './src/index.js',</span><br><span class="line">      another: './src/another-module.js'</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      new HTMLWebpackPlugin(&#123;</span><br><span class="line">        title: 'Code Splitting'</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="addition">+     new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line"><span class="addition">+       name: 'common' // 指定公共 bundle 的名称。</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="构建效果："><a href="#构建效果：" class="headerlink" title="构建效果："></a>构建效果：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">            Asset       Size  Chunks                    Chunk Names</span><br><span class="line">  index.bundle.js  665 bytes       0  [emitted]         index</span><br><span class="line">another.bundle.js  537 bytes       1  [emitted]         another</span><br><span class="line"> common.bundle.js     547 kB       2  [emitted]  [big]  common</span><br></pre></td></tr></table></figure><h2 id="动态导入-dynamic-imports"><a href="#动态导入-dynamic-imports" class="headerlink" title="动态导入(dynamic imports)"></a>动态导入(dynamic imports)</h2><h3 id="在index-js中动态导入-lodash模块"><a href="#在index-js中动态导入-lodash模块" class="headerlink" title="在index.js中动态导入 lodash模块"></a>在<code>index.js</code>中动态导入 <code>lodash</code>模块</h3><h5 id="webpack-config-js-13"><a href="#webpack-config-js-13" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line">  const HTMLWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      index: './src/index.js'</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      new HTMLWebpackPlugin(&#123;</span><br><span class="line">        title: 'Code Splitting'</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].bundle.js',</span><br><span class="line"><span class="addition">+     chunkFilename: '[name].bundle.js',//决定非入口 chunk 的名称</span></span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="src-index-js-1"><a href="#src-index-js-1" class="headerlink" title="src/index.js"></a>src/index.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- import _ from 'lodash';</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">- function component() &#123;</span></span><br><span class="line"><span class="addition">+ function getComponent() &#123;</span></span><br><span class="line"><span class="deletion">-   var element = document.createElement('div');</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-   // Lodash, now imported by this script</span></span><br><span class="line"><span class="deletion">-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class="line"><span class="addition">+   return import(/* webpackChunkName: "lodash" */ 'lodash').then(_ =&gt; &#123;</span></span><br><span class="line"><span class="addition">+     var element = document.createElement('div');</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+     element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+     return element;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+   &#125;).catch(error =&gt; 'An error occurred while loading the component');</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- document.body.appendChild(component());</span></span><br><span class="line"><span class="addition">+ getComponent().then(component =&gt; &#123;</span></span><br><span class="line"><span class="addition">+   document.body.appendChild(component);</span></span><br><span class="line"><span class="addition">+ &#125;)</span></span><br></pre></td></tr></table></figure><h4 id="lodash-自动会分离到一个单独的-bundle："><a href="#lodash-自动会分离到一个单独的-bundle：" class="headerlink" title="lodash 自动会分离到一个单独的 bundle："></a><code>lodash</code> 自动会分离到一个单独的 bundle：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">           Asset     Size  Chunks                    Chunk Names</span><br><span class="line">lodash.bundle.js   541 kB       0  [emitted]  [big]  lodash</span><br><span class="line"> index.bundle.js  6.35 kB       1  [emitted]         index</span><br></pre></td></tr></table></figure><h3 id="async-函数简化代码："><a href="#async-函数简化代码：" class="headerlink" title="async 函数简化代码："></a><code>async</code> 函数简化代码：</h3><p>​        <code>import()</code> 会返回一个 promise，可以和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener"><code>async</code> 函数</a>一起使用。但是，需要使用像 Babel 的预处理器和<a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/#installation" target="_blank" rel="noopener">Syntax Dynamic Import Babel Plugin</a>。</p><h4 id="src-index-js-2"><a href="#src-index-js-2" class="headerlink" title="src/index.js"></a>src/index.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- function getComponent() &#123;</span></span><br><span class="line"><span class="addition">+ async function getComponent() &#123;</span></span><br><span class="line"><span class="deletion">-   return import(/* webpackChunkName: "lodash" */ 'lodash').then(_ =&gt; &#123;</span></span><br><span class="line"><span class="deletion">-     var element = document.createElement('div');</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-     element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-     return element;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-   &#125;).catch(error =&gt; 'An error occurred while loading the component');</span></span><br><span class="line"><span class="addition">+   var element = document.createElement('div');</span></span><br><span class="line"><span class="addition">+   const _ = await import(/* webpackChunkName: "lodash" */ 'lodash');</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+   element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+   return element;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getComponent().then(component =&gt; &#123;</span><br><span class="line">    document.body.appendChild(component);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>​        上文代码分离部分，lodash`包每次加载页面都需要请求它，没有分离的必要，会对性能产生负面影响。下面举一个实用例子。</p><p>​        增加一个交互，当用户点击按钮的时候用 console 打印一些文字。但是会等到第一次交互的时候再加载那个代码块（<code>print.js</code>）</p><h4 id="src-print-js"><a href="#src-print-js" class="headerlink" title="src/print.js"></a>src/print.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'The print.js module has loaded! See the network tab in dev tools...'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Button Clicked: Here\'s "some text"!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="src-index-js-3"><a href="#src-index-js-3" class="headerlink" title="src/index.js"></a>src/index.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  <span class="keyword">var</span> br = <span class="built_in">document</span>.createElement(<span class="string">'br'</span>);</span><br><span class="line"></span><br><span class="line">  button.innerHTML = <span class="string">'Click me and look at the console!'</span>;</span><br><span class="line">  element.innerHTML = _.join([<span class="string">'Hello'</span>, <span class="string">'webpack'</span>], <span class="string">' '</span>);</span><br><span class="line">  element.appendChild(br);</span><br><span class="line">  element.appendChild(button);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Note that because a network request is involved, some indication</span></span><br><span class="line">  <span class="comment">// of loading would need to be shown in a production-level site/app.</span></span><br><span class="line">  button.onclick = <span class="function"><span class="params">e</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "print" */</span> <span class="string">'./print'</span>).then(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> print = <span class="built_in">module</span>.default;</span><br><span class="line">    print();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>​        如果我们在部署新版本时不更改资源的文件名，浏览器可能会认为它没有被更新，就会使用它的缓存版本。通过配置确保 webpack 编译生成的文件能够被客户端缓存，而在文件内容变化后，能够请求到新的文件。</p><h2 id="chunkhash替换输出文件名"><a href="#chunkhash替换输出文件名" class="headerlink" title="chunkhash替换输出文件名"></a><code>chunkhash</code>替换输出文件名</h2><p><code>[hash]</code> 替换，在文件名中包含一个构建相关(build-specific)的 hash，</p><p><code>[chunkhash]</code> 替换，在文件名中包含一个 chunk 相关(chunk-specific)的哈希。</p><h4 id="webpack-config-js-14"><a href="#webpack-config-js-14" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">'Caching'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="构建结果：-1"><a href="#构建结果：-1" class="headerlink" title="构建结果："></a>构建结果：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">                       Asset       Size  Chunks                    Chunk Names</span><br><span class="line">main.7e2c49a622975ebd9b7e.js     544 kB       0  [emitted]  [big]  main</span><br><span class="line">                  index.html  197 bytes          [emitted]</span><br></pre></td></tr></table></figure><p>如果不做修改，再次运行构建，会发现文件名<strong>还是改变了</strong>（可能会变）</p><h5 id="这是因为-webpack-在入口-chunk-中，包含了某些样板-boilerplate-，特别是-runtime和-manifest。（样板-boilerplate-指-webpack-运行时的引导代码）"><a href="#这是因为-webpack-在入口-chunk-中，包含了某些样板-boilerplate-，特别是-runtime和-manifest。（样板-boilerplate-指-webpack-运行时的引导代码）" class="headerlink" title="这是因为 webpack 在入口 chunk 中，包含了某些样板(boilerplate)，特别是 runtime和 manifest。（样板(boilerplate)指 webpack 运行时的引导代码）"></a>这是因为 webpack 在入口 chunk 中，包含了某些样板(boilerplate)，特别是 <code>runtime</code>和 <code>manifest</code>。（样板(boilerplate)指 webpack 运行时的引导代码）</h5><h2 id="提取模板-Extracting-Boilerplate"><a href="#提取模板-Extracting-Boilerplate" class="headerlink" title="提取模板(Extracting Boilerplate)"></a>提取模板(Extracting Boilerplate)</h2><h4 id="CommonsChunkPlugin-可将webpack-的样板和-manifest-提取出来"><a href="#CommonsChunkPlugin-可将webpack-的样板和-manifest-提取出来" class="headerlink" title="CommonsChunkPlugin 可将webpack 的样板和 manifest 提取出来"></a><code>CommonsChunkPlugin</code> 可将webpack 的样板和 manifest 提取出来</h4><h5 id="webpack-config-js-15"><a href="#webpack-config-js-15" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  const path = require('path');</span><br><span class="line"><span class="addition">+ const webpack = require('webpack');</span></span><br><span class="line">  const CleanWebpackPlugin = require('clean-webpack-plugin');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    entry: './src/index.js',</span><br><span class="line">    plugins: [</span><br><span class="line">      new CleanWebpackPlugin(['dist']),</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Caching'</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="addition">+     new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line"><span class="addition">+       name: 'manifest'//通过指定 entry 配置中未用到的名称</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].[chunkhash].js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="提取第三方库"><a href="#提取第三方库" class="headerlink" title="提取第三方库"></a>提取第三方库</h3><p>​        通过使用新的 <code>entry(入口)</code> 起点，以及再额外配置一个 <code>CommonsChunkPlugin</code> 实例的组合方式，将更新频率低的第三方库(library)提取到单独的 <code>vendor</code> chunk 文件中。</p><h4 id="webpack-config-js-16"><a href="#webpack-config-js-16" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  var path = require('path');</span><br><span class="line">  const webpack = require('webpack');</span><br><span class="line">  const CleanWebpackPlugin = require('clean-webpack-plugin');</span><br><span class="line">  const HtmlWebpackPlugin = require('html-webpack-plugin');</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line"><span class="deletion">-   entry: './src/index.js',</span></span><br><span class="line"><span class="addition">+   entry: &#123;</span></span><br><span class="line"><span class="addition">+     main: './src/index.js',</span></span><br><span class="line"><span class="addition">+     vendor: [</span></span><br><span class="line"><span class="addition">+       'lodash'</span></span><br><span class="line"><span class="addition">+     ]</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">    plugins: [</span><br><span class="line">      new CleanWebpackPlugin(['dist']),</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: 'Caching'</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="addition">+     new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line"><span class="addition">+       name: 'vendor'</span></span><br><span class="line"><span class="addition">+     &#125;),</span></span><br><span class="line">      new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name: 'manifest'</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: '[name].[chunkhash].js',</span><br><span class="line">      path: path.resolve(__dirname, 'dist')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h4 id="构建结果：-2"><a href="#构建结果：-2" class="headerlink" title="构建结果："></a>构建结果：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                           Asset       Size  Chunks                    Chunk Names</span><br><span class="line">  vendor.8196d409d2f988123318.js     541 kB       0  [emitted]  [big]  vendor</span><br><span class="line">    main.0ac0ae2d4a11214ccd19.js  791 bytes       1  [emitted]         main</span><br><span class="line">manifest.004a1114de8bcf026622.js    5.85 kB       2  [emitted]         manifest</span><br><span class="line">                      index.html  352 bytes          [emitted]</span><br></pre></td></tr></table></figure><h2 id="模块标识符-Module-Identifiers"><a href="#模块标识符-Module-Identifiers" class="headerlink" title="模块标识符(Module Identifiers)"></a>模块标识符(Module Identifiers)</h2><p>​        添加一个模块 <code>print.js</code>，再次运行构建，期望只有 <code>main</code> bundle 的 hash 发生变化。</p><p>​        然而，三个文件的 hash <strong>都变化了</strong>。这是因为每个 <a href="https://www.webpackjs.com/api/module-variables#module-id-commonjs-" target="_blank" rel="noopener"><code>module.id</code></a> 会基于默认的解析顺序(resolve order)进行增量。也就是说，当解析顺序发生变化，ID 也会随之改变。因此，简要概括：</p><ul><li><code>main</code> bundle 会随着自身的新增内容的修改，而发生变化。</li><li><code>vendor</code> bundle 会随着自身的 <code>module.id</code> 的修改，而发生变化。</li><li><code>manifest</code> bundle 会因为当前包含一个新模块的引用，而发生变化。</li></ul><p>​        第一个和最后一个都是符合预期的行为，而 <code>vendor</code> 的 hash 发生变化是需要修复的。使用两个插件来解决这个问题。</p><p> <a href="https://www.webpackjs.com/plugins/named-modules-plugin" target="_blank" rel="noopener"><code>NamedModulesPlugin</code></a>，将使用模块的路径，而不是数字标识符。虽然此插件有助于在开发过程中输出结果的可读性，然而执行时间会长一些。</p><h4 id="HashedModuleIdsPlugin，推荐用于生产环境构建："><a href="#HashedModuleIdsPlugin，推荐用于生产环境构建：" class="headerlink" title="HashedModuleIdsPlugin，推荐用于生产环境构建："></a><a href="https://www.webpackjs.com/plugins/hashed-module-ids-plugin" target="_blank" rel="noopener"><code>HashedModuleIdsPlugin</code></a>，推荐用于生产环境构建：</h4><h4 id="webpack-config-js-17"><a href="#webpack-config-js-17" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> webpack.HashedModuleIdsPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>现在不管再添加任何新的本地依赖，每次构建<code>vendor</code> hash 都保持一致。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js排序算法</title>
      <link href="/2020/08/10/js-sort/"/>
      <url>/2020/08/10/js-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h4 id="外循环每排一次，最大或最小数浮到最后"><a href="#外循环每排一次，最大或最小数浮到最后" class="headerlink" title="外循环每排一次，最大或最小数浮到最后"></a>外循环每排一次，最大或最小数浮到最后</h4><p>外循环：N个数需排N-1次</p><p>内循环：N个数需交换N-1次</p><h5 id="i递减"><a href="#i递减" class="headerlink" title="i递减"></a>i递减</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=arr.length<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            temp=arr[j];</span><br><span class="line">            arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="i递增"><a href="#i递增" class="headerlink" title="i递增"></a>i递增</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.length-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            temp=arr[j];</span><br><span class="line">            arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>　　<strong>对于已经有序或接近有序的集合时，会进行很多次不必要的循环比较</strong>，为此，需要改进实现，<strong>设置一个flag记录在一次循环比较中是否有交换操作</strong>，如果没有说明集合已经有序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line">boolean flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;(i&lt;arr.length<span class="number">-1</span>) &amp;&amp; flag;i++)&#123;</span><br><span class="line">flag = <span class="literal">false</span>;<span class="comment">// 用flag作为标记</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            temp=arr[j];</span><br><span class="line">            arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">            flag = <span class="literal">true</span>;<span class="comment">// 有数据交换则为true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　最好的情况下，也就是数组有序时，根据最后改进的代码，需要比较n-1次关键字，没有数据交换，时间复杂度为O(n)。最坏的情况下，即待排序记录全为倒序，此时比较1+2+3+4+…+(n-1) = n(n-1)/2次，并作等数量级的记录移动。所以时间复杂度为O(n2)。</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h4 id="从第一个数开始，找该数之后最大或最小的数，与之交换"><a href="#从第一个数开始，找该数之后最大或最小的数，与之交换" class="headerlink" title="从第一个数开始，找该数之后最大或最小的数，与之交换"></a>从第一个数开始，找该数之后最大或最小的数，与之交换</h4><p>外循环：N个数需排N-1次</p><p>内循环：找i后最大或最小的数</p><h4 id="找Min-从小到大"><a href="#找Min-从小到大" class="headerlink" title="找Min(从小到大)"></a>找Min(从小到大)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> temp,</span><br><span class="line">        min=arr[i],</span><br><span class="line">        index=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&lt;min)&#123;</span><br><span class="line">            min=arr[j]</span><br><span class="line">            index=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=arr[i];</span><br><span class="line">    arr[i]=arr[index];</span><br><span class="line">    arr[index]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找Max-从大到小"><a href="#找Max-从大到小" class="headerlink" title="找Max(从大到小)"></a>找Max(从大到小)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> temp,</span><br><span class="line">        max=arr[i],</span><br><span class="line">        index=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;max)&#123;</span><br><span class="line">            max=arr[j]</span><br><span class="line">            index=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=arr[i];</span><br><span class="line">    arr[i]=arr[index];</span><br><span class="line">    arr[index]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　从简单选择排序过程看，最大的特点是减少了移动数据的次数，这样节约了时间。无论最好还是最差的情况下，比较次数都是一样的，第i趟要比较n-i次关键字，共需要比较(n-1)+(n-2)+…+2+1=n(n-1)/2次，最好情况下，即有序时，交换0次，最坏情况下，即逆序时，交换n-1次。最终排序时间为比较和移动的总和，时间复杂度为O(n2)。尽管与冒泡排序同为O(n2)，但简单选择排序的性能还是要略优于冒泡排序。</p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p><strong>思路</strong>：先递归分解数列，再根据<strong>两者选最小原则</strong>合并两个数列（分治思想的典型应用）</p><p>　　（1）递归分解数列直到每个小组只有一个元素为止。</p><p>　　（2）可以视小组为有序，比较每个小组的第一个元素，两者选最小，push到新数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span> (<span class="params"> array </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = array.length;</span><br><span class="line">    <span class="keyword">if</span>( len &lt; <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">        left = array.slice(<span class="number">0</span>, middle),</span><br><span class="line">        right = array.slice(middle);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line">    <span class="keyword">while</span> (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度：O-N-logN"><a href="#时间复杂度：O-N-logN" class="headerlink" title="时间复杂度：O(N*logN)"></a>时间复杂度：O(N*logN)</h3><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="左右指针法（推荐记忆）"><a href="#左右指针法（推荐记忆）" class="headerlink" title="左右指针法（推荐记忆）"></a>左右指针法（推荐记忆）</h2><ol><li>选取一个关键字(key)作为枢轴，一般取整组记录的（首、中、尾三数取中），这里选取序列第一一个数为枢轴。</li><li>设置两个变量left = 0;right = N - 1;</li><li>从left一直向右走，直到找到一个大于key的值，right一直向左走，直至找到一个小于key的值，然后交换这两个数。</li><li>重复第三步，一直往后找，直到left和right相遇，这时将key放置left的位置即可。</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTI5MTUzMzMzNzkx?x-oss-process=image/format,png"  alt="这里写图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">a, l=<span class="number">0</span>, r=a.length<span class="number">-1</span></span>)//注意<span class="title">r</span>=<span class="title">a</span>.<span class="title">length</span>-1</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> h=l,</span><br><span class="line">        e=r,</span><br><span class="line">        keyIndex=l,</span><br><span class="line">        key=a[keyIndex],</span><br><span class="line">        temp;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r &amp;&amp; a[r] &gt;= key)</span><br><span class="line">            --r;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r &amp;&amp; a[l] &lt;= key)</span><br><span class="line">            ++l;</span><br><span class="line">        temp=a[l];</span><br><span class="line">        a[l]=a[r];</span><br><span class="line">        a[r]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    temp=a[l];</span><br><span class="line">    a[l]=key;</span><br><span class="line">    a[keyIndex]=temp;</span><br><span class="line">    quickSort(a,h,l<span class="number">-1</span>);</span><br><span class="line">    quickSort(a,l+<span class="number">1</span>,e)</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="挖坑法1"><a href="#挖坑法1" class="headerlink" title="挖坑法1"></a>挖坑法1</h2><h4 id="（基准值可随意取）"><a href="#（基准值可随意取）" class="headerlink" title="（基准值可随意取）"></a>（基准值可随意取）</h4><ol><li>选取一个关键字(key)作为枢轴，一般取整组记录的（首、中、尾三数取中），这里选取序列第一一个数为枢轴，也是初始的坑位。</li><li>设置两个变量left = 0;right = N - 1;</li><li>从right一直向前走，直到找到一个小于key的值，然后将该数放入坑中，坑位变成array[right]。</li><li>从left一直向后走，直到找到一个大于key的值，然后将该数放入坑中，坑位变成array[left]。</li><li>重复3和4的步骤，直到left和right相遇，然后将key放入最后一个坑位。</li></ol><p><img src="/" class="lazyload" data-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMTI5MTYzNzM2NjUy?x-oss-process=image/format,png"  alt="这里写图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">a, l=<span class="number">0</span>, r=a.length<span class="number">-1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> h=l,e=r</span><br><span class="line">    <span class="keyword">var</span> key=a[l];</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r &amp;&amp; a[r] &gt;= key)</span><br><span class="line">            r--;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">            a[l]=a[r];</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r &amp;&amp; a[l] &lt;= key)</span><br><span class="line">            l++;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">            a[r]=a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    a[l]=key;</span><br><span class="line">    quickSort(a,h,l<span class="number">-1</span>);</span><br><span class="line">    quickSort(a,l+<span class="number">1</span>,e)</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">quickSort(arr);</span><br></pre></td></tr></table></figure><h2 id="挖坑法2（带左右指针）"><a href="#挖坑法2（带左右指针）" class="headerlink" title="挖坑法2（带左右指针）"></a>挖坑法2（带左右指针）</h2><h4 id="（下面代码写法，基准数只能取第一或最后）"><a href="#（下面代码写法，基准数只能取第一或最后）" class="headerlink" title="（下面代码写法，基准数只能取第一或最后）"></a>（下面代码写法，基准数只能取第一或最后）</h4><ol><li>i =L; j = R; 将基准数挖出形成第一个坑a[i]。</li><li>j–由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</li><li>i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</li><li>再重复执行2，3二步，直到i==j，将基准数填入a[i]中。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">a, l=<span class="number">0</span>, r=a.length<span class="number">-1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = l, j = r, x = a[l];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt;= x) <span class="comment">// 从右向左找第一个小于x的数</span></span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            a[i++] = a[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt; x) <span class="comment">// 从左向右找第一个大于等于x的数</span></span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            a[j--] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = x;</span><br><span class="line">    quickSort(a, l, i - <span class="number">1</span>); <span class="comment">// 递归调用</span></span><br><span class="line">    quickSort(a, i + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">quickSort(arr);</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p><strong>思路：</strong></p><p>​        N个数排N-1次。</p><p>　　假设前n个数组已经排列完成，第n+1个元素（记为插入值） 与前n个元素倒序比较，比插入值大则往后挪让位，小则插入其后。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> inserted = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span> &amp;&amp; inserted&lt;arr[j];j--)<span class="comment">//注意j&gt;=0</span></span><br><span class="line">            arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">        arr[j+<span class="number">1</span>]=inserted;<span class="comment">//注意j不能用let声明</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度：O-n2"><a href="#时间复杂度：O-n2" class="headerlink" title="时间复杂度：O(n2)"></a>时间复杂度：O(n2)</h4><h1 id="希尔排序（缩小增量插入排序）"><a href="#希尔排序（缩小增量插入排序）" class="headerlink" title="希尔排序（缩小增量插入排序）"></a>希尔排序（缩小增量插入排序）</h1><p><strong>思路：</strong>每隔增量inc分成一小组，小组内插入排序。逐渐减半增量直至向下取整小于0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> inc=<span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>); inc&gt;<span class="number">0</span>;inc=<span class="built_in">Math</span>.floor(inc/<span class="number">2</span>))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i= inc;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> inserted = arr[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i-inc;j&gt;=<span class="number">0</span> &amp;&amp; inserted&lt;arr[j];j-=inc)</span><br><span class="line">                arr[j+inc]=arr[j];</span><br><span class="line">            arr[j+inc]=inserted;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p><a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6129630.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基本原理与规则</title>
      <link href="/2020/08/05/CSS/"/>
      <url>/2020/08/05/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS工作流程"><a href="#CSS工作流程" class="headerlink" title="CSS工作流程"></a>CSS工作流程</h1><ol><li>浏览器载入HTML文件。</li><li>将HTML文件转化成一个DOM。</li><li>浏览器会拉取该HTML相关的大部分资源，比如嵌入到页面的图片、视频和CSS样式。JavaScript则会稍后进行处理。</li><li>浏览器拉取到CSS之后会进行解析，根据选择器的不同类型（比如element、class、id等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id选择器等）应用在对应的DOM的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。</li><li>上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。</li><li>网页展示在屏幕上（这一步被称为着色）。</li></ol><p><img src="/" class="lazyload" data-src="https://mdn.mozillademos.org/files/11781/rendering.svg"  alt="img"></p><h3 id="当浏览器遇到无法解析的CSS代码，直接忽略"><a href="#当浏览器遇到无法解析的CSS代码，直接忽略" class="headerlink" title="当浏览器遇到无法解析的CSS代码，直接忽略"></a>当浏览器遇到无法解析的CSS代码，直接忽略</h3><p>在<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/First_steps/What_is_CSS#浏览器支持" target="_blank" rel="noopener">之前的文章中</a>我们提到了浏览器并不会同时实现所有的新CSS，此外很多人也不会使用最新版本的浏览器。鉴于CSS一直不断的开发，因此领先于浏览器可以识别的范围，那么你也许会好奇当浏览器遇到无法解析的CSS选择器或声明的时候会发生什么呢？</p><p>答案就是浏览器什么也不会做，继续解析下一个CSS样式！</p><p>浏览器无法解析CSS的情况：</p><ol><li>旧版浏览器运行新特性CSS代码</li><li>书写错误的CSS代码（或者误拼写）</li></ol><p>相似的，当浏览器遇到无法解析的选择器的时候，他会直接忽略整个选择器规则，然后解析下一个CSS选择器。</p><p>当你为一个元素指定多个CSS样式的时候，浏览器会加载样式表中的最后的CSS代码进行渲染（样式表优先级），因此，你可以为同一个元素指定多个CSS样式来解决有些浏览器不兼容新特性的问题。例如，老式的浏览器由于无法解析<code>calc()而</code>忽略这一行；新式的浏览器则会把这一行解析成像素值，并且覆盖第一行指定的宽度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冲突规则"><a href="#冲突规则" class="headerlink" title="冲突规则"></a>冲突规则</h1><h3 id="层叠（Cascade）"><a href="#层叠（Cascade）" class="headerlink" title="层叠（Cascade）"></a>层叠（Cascade）</h3><p>当应用两条同级别的规则到一个元素的时候，写在后面的会覆盖前面。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>浏览器是根据优先级来决定当多个规则有不同选择器对应相同的元素的时候需要使用哪个规则。</p><ul><li>元素选择器不是很具体 — 会选择页面上该类型的所有元素 — 优先级低</li><li>类选择器稍微具体点 — 会选择该页面中有特定 <code>class</code> 属性值的元素 — 优先级高</li></ul><table><thead><tr><th align="left">选择器</th><th align="left">示例</th><th align="left">学习CSS的教程</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors" target="_blank" rel="noopener">类型选择器</a></td><td align="left"><code>h1 { }</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#Type_selectors" target="_blank" rel="noopener">类型选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors" target="_blank" rel="noopener">通配选择器</a></td><td align="left"><code>* { }</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#The_universal_selector" target="_blank" rel="noopener">通配选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors" target="_blank" rel="noopener">类选择器</a></td><td align="left"><code>.box { }</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#Class_selectors" target="_blank" rel="noopener">类选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors" target="_blank" rel="noopener">ID选择器</a></td><td align="left"><code>#unique { }</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/user:chrisdavidmills/CSS_Learn/CSS_Selectors/Type_Class_and_ID_Selectors#ID_Selectors" target="_blank" rel="noopener">ID选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors" target="_blank" rel="noopener">标签属性选择器</a></td><td align="left"><code>a[title] { }</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Attribute_selectors" target="_blank" rel="noopener">标签属性选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes" target="_blank" rel="noopener">伪类选择器</a></td><td align="left"><code>p:first-child { }</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Pseuso-classes_and_Pseudo-elements#What_is_a_pseudo-class" target="_blank" rel="noopener">伪类</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements" target="_blank" rel="noopener">伪元素选择器</a></td><td align="left"><code>p::first-line { }</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Pseuso-classes_and_Pseudo-elements#What_is_a_pseudo-element" target="_blank" rel="noopener">伪元素</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Descendant_combinator" target="_blank" rel="noopener">后代选择器</a></td><td align="left"><code>article p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Descendant_Selector" target="_blank" rel="noopener">后代运算符</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator" target="_blank" rel="noopener">子代选择器</a></td><td align="left"><code>article &gt; p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Child_combinator" target="_blank" rel="noopener">子代选择器</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Adjacent_sibling_combinator" target="_blank" rel="noopener">相邻兄弟选择器</a></td><td align="left"><code>h1 + p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#Adjacent_sibling" target="_blank" rel="noopener">相邻兄弟</a></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/General_sibling_combinator" target="_blank" rel="noopener">通用兄弟选择器</a></td><td align="left"><code>h1 ~ p</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/User:chrisdavidmills/CSS_Learn/CSS_Selectors/Combinators#General_sibling" target="_blank" rel="noopener">通用兄弟</a></td></tr></tbody></table><p>一个选择器的优先级可以说是由四个部分相加 (分量)，可以认为是个十百千 ：</p><ol><li><strong>千位</strong>： 内联样式</li><li><strong>百位</strong>： ID选择器</li><li><strong>十位</strong>： 类选择器、属性选择器或者伪类</li><li><strong>个位</strong>：元素、伪元素选择器</li></ol><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><table><thead><tr><th align="left">选择器</th><th align="left">千位</th><th align="left">百位</th><th align="left">十位</th><th align="left">个位</th><th align="left">优先级</th></tr></thead><tbody><tr><td align="left"><code>h1</code></td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">1</td><td align="left">0001</td></tr><tr><td align="left"><code>h1 + p::first-letter</code></td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">3</td><td align="left">0003</td></tr><tr><td align="left"><code>li &gt; a[href*=&quot;en-US&quot;] &gt; .inline-warning</code></td><td align="left">0</td><td align="left">0</td><td align="left">2</td><td align="left">2</td><td align="left">0022</td></tr><tr><td align="left"><code>#identifier</code></td><td align="left">0</td><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">0100</td></tr><tr><td align="left">内联样式</td><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">1000</td></tr></tbody></table><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p> 一些设置在父元素上的css属性是可以被子元素继承的，有些则不能。</p><p>样式属性的数据信息表（可否继承）</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Reference" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/Reference</a></p><h5 id="控制继承"><a href="#控制继承" class="headerlink" title="控制继承"></a>控制继承</h5><p>CSS 为控制继承提供了四个特殊的通用属性值。每个css属性都接收这些值</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/inherit" target="_blank" rel="noopener"><code>inherit</code></a></p><p>设置该属性会使子元素属性和父元素相同。实际上，就是 “开启继承”</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/initial" target="_blank" rel="noopener"><code>initial</code></a></p><p>设置属性值和浏览器默认样式相同。如果浏览器默认样式中未设置且该属性是自然继承的，那么会设置为 <code>inherit</code> </p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/unset" target="_blank" rel="noopener"><code>unset</code></a></p><p>将属性重置为自然值，也就是如果属性是自然继承那么就是 <code>inherit</code>，否则和 <code>initial</code>一样</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/revert" target="_blank" rel="noopener"><code>revert</code></a></p><p>表示样式表中定义的元素属性的默认值。若用户定义样式表中显式设置，则按此设置；否则，按照浏览器定义样式表中的样式设置；否则，等价于unset </p></li><li><p><code>!important</code></p><p>覆盖所有优先级计算，成为最顶级</p></li></ul><h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"color: green;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Default <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> color<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Inherit the <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: inherit;"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> color<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Reset the <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: initial;"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> color<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Unset the <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: unset;"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> color<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一项没有规定颜色继承方式，因此使用浏览器对<a>标签预设的超链接样式表，在这里是蓝色</p><h5 id="注-浏览器预设样式表：其优先级高于其父元素"><a href="#注-浏览器预设样式表：其优先级高于其父元素" class="headerlink" title="[注] 浏览器预设样式表：其优先级高于其父元素"></a>[注] 浏览器预设样式表：其优先级高于其父元素</h5><p>第二项将继承方式设置为inherit，于是使用其直接父元素（最近的父）的颜色值，在这里是绿色；</p><p>第三项将继承方式设置为initial，表示使用color属性初始值（黑色）；</p><h5 id="注-不要混淆属性初始值和浏览器样式表指定值"><a href="#注-不要混淆属性初始值和浏览器样式表指定值" class="headerlink" title="[注] 不要混淆属性初始值和浏览器样式表指定值"></a>[注] 不要混淆属性初始值和浏览器样式表指定值</h5><p>第四项将继承方式设置为unset，意思是恢复其原本的继承方式。对color属性而言，就相当于inherit；而对于诸如border这样默认不继承的属性，就相当于initial</p><h1 id="块级（Block）和-内联（Inline）"><a href="#块级（Block）和-内联（Inline）" class="headerlink" title="块级（Block）和 内联（Inline）"></a>块级（Block）和 内联（Inline）</h1><p>对盒子<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 属性的设置，比如 <code>inline</code> 或者 <code>block</code> ，来控制盒子的外部显示类型。</p><h4 id="块级（block）盒子："><a href="#块级（block）盒子：" class="headerlink" title="块级（block）盒子："></a>块级（block）盒子：</h4><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽</li><li>每个盒子都会换行</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noopener"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noopener"><code>height</code></a> 属性可以发挥作用</li><li>内边距（padding）, 外边距（margin） 和 边框（border） 会将其他元素从当前盒子周围“推开”</li></ul><h4 id="内联（inline）盒子："><a href="#内联（inline）盒子：" class="headerlink" title="内联（inline）盒子："></a>内联（inline）盒子：</h4><ul><li>盒子不会产生换行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noopener"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noopener"><code>height</code></a> 属性将不起作用。</li><li>垂直方向的内边距、外边距、边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子推开。</li><li>水平方向的内边距、外边距、边框会被应用而且也会把其他处于 <code>inline</code> 状态的盒子推开。</li></ul><h4 id="中间状态（inline-block）："><a href="#中间状态（inline-block）：" class="headerlink" title="中间状态（inline-block）："></a>中间状态（inline-block）：</h4><ul><li>盒子不会产生换行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width" target="_blank" rel="noopener"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noopener"><code>height</code></a> 属性可以发挥作用</li><li>内边距（padding）, 外边距（margin） 和 边框（border） 会将其他元素从当前盒子周围“推开”</li></ul><p>用例：导航栏中 <a>扩大内边距方便点击，且需推开上下边框、保持一行</p><p><img src="/" class="lazyload" data-src="inline-block-nav.png"  alt="image-20200801205546208"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="inline-block-nav2.png"  alt="image-20200801205918477"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置JRE生产环境</title>
      <link href="/2020/07/15/Docker/"/>
      <url>/2020/07/15/Docker/</url>
      
        <content type="html"><![CDATA[<ol><li><p>根据Dockerfile生成镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nginx:test .</span><br><span class="line">//根据当前目录下的Dockerfile构建一个 nginx:test（镜像名称:镜像标签）</span><br></pre></td></tr></table></figure></li><li><p>查看列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps//正在运行容器</span><br><span class="line">docker ps -a//包括已停止的容器</span><br><span class="line">docker container ls //容器列表</span><br><span class="line">docker image ls//镜像列表</span><br></pre></td></tr></table></figure></li><li><p>删除指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container rm 容器id</span><br><span class="line">docker image rm 镜像id</span><br></pre></td></tr></table></figure></li><li><p>连接进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>映射容器端口到主机端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 test</span><br><span class="line">//映射容器的8080端口到主机的80端口上</span><br></pre></td></tr></table></figure></li><li><p>配置容器DNS</p><p>web应用需要访问域名接口，则容器内需要配置DNS</p><p>在主机的 /etc/docker/daemon.json 文件中增加以下内容设置全局的 DNS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;dns&quot; : [</span><br><span class="line">    &quot;114.114.114.114&quot;,</span><br><span class="line">    &quot;8.8.8.8&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl docker restart//重启docker服务</span><br><span class="line"></span><br><span class="line">//centos8 防火墙 需要开放 主机的虚拟网络接口docker0</span><br><span class="line">firewall-cmd --permanent --zone=trusted --add-interface=docker0</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Element-Admin踩坑总结</title>
      <link href="/2020/07/10/Vue-Element-Admin/"/>
      <url>/2020/07/10/Vue-Element-Admin/</url>
      
        <content type="html"><![CDATA[<ol><li><h3 id="图标需要添加到icons文件夹"><a href="#图标需要添加到icons文件夹" class="headerlink" title="图标需要添加到icons文件夹"></a>图标需要添加到icons文件夹</h3></li></ol><ol start="2"><li><h3 id="parseTime-等工具函数需要export进filters，并将注册全局filters"><a href="#parseTime-等工具函数需要export进filters，并将注册全局filters" class="headerlink" title="parseTime 等工具函数需要export进filters，并将注册全局filters"></a>parseTime 等工具函数需要export进filters，并将注册全局filters</h3><p>错误提示：</p><p><img src="/" class="lazyload" data-src="filter_error.png"  alt=""></p><p>添加filters文件夹</p><p>main.js 添加以下代码：</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">'./filters'</span> <span class="comment">// global filters</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// register global utility filters</span></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  Vue.filter(key, filters[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><h3 id="el-table-的key属性"><a href="#el-table-的key属性" class="headerlink" title="el-table 的key属性"></a>el-table 的key属性</h3><p>Vue官方说明:<a href="https://cn.vuejs.org/v2/api/#key" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#key</a></p><p><code>key</code> 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag"><span class="attr">:key</span>=<span class="string">"tableKey"</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-loading</span>=<span class="string">"listLoading"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:data</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><h3 id="el-table-的slot-scope属性"><a href="#el-table-的slot-scope属性" class="headerlink" title="el-table 的slot-scope属性"></a>el-table 的slot-scope属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"&#123;row&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; row.id &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>Scoped slot</code> 可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据</p><p><a href="https://blog.csdn.net/tg928600774/article/details/81945140?utm_source=blogxgwz1" target="_blank" rel="noopener">https://blog.csdn.net/tg928600774/article/details/81945140?utm_source=blogxgwz1</a></p></li></ol><ol start="5"><li><h3 id="el-form-的prop属性"><a href="#el-form-的prop属性" class="headerlink" title="el-form 的prop属性"></a>el-form 的prop属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"Title"</span> <span class="attr">prop</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"temp.title"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Form 组件提供了表单验证的功能，只需要通过 <code>rules</code> 属性传入约定的验证规则，并将 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可。</p><p><a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">https://github.com/yiminghe/async-validator</a></p></li></ol><ol start="6"><li><h3 id="搜索id无效"><a href="#搜索id无效" class="headerlink" title="搜索id无效"></a>搜索id无效</h3><p>通过控制台发现输入id为字符串，因此需要js toString() 转换后比对</p></li></ol><ol start="7"><li><h3 id="异步数据先显示初始数据，再显示从后台带回的数据"><a href="#异步数据先显示初始数据，再显示从后台带回的数据" class="headerlink" title="异步数据先显示初始数据，再显示从后台带回的数据"></a>异步数据先显示初始数据，再显示从后台带回的数据</h3><p><img src="/" class="lazyload" data-src="render_error.png"  alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">v-if</span>=<span class="string">"index!=-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"头像"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-avatar</span> <span class="attr">:size</span>=<span class="string">"50"</span> <span class="attr">:src</span>=<span class="string">"list[index].photo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误原因：当vue首先执行的时候，list里面根本没有数据，</p><p>解决方法：在该模块添加判断语句，如果index=-1，不进行该模块的渲染</p><p><a href="https://blog.csdn.net/qq_42985101/article/details/102056925" target="_blank" rel="noopener">https://blog.csdn.net/qq_42985101/article/details/102056925</a></p></li></ol><ol start="8"><li><h3 id="Mock-api-地址不能出现前缀重复"><a href="#Mock-api-地址不能出现前缀重复" class="headerlink" title="Mock api 地址不能出现前缀重复"></a>Mock api 地址不能出现前缀重复</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url: '/vue-element-admin/record-list'</span><br><span class="line">url: '/vue-element-admin/record'</span><br><span class="line">不兼容，会出错</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><h3 id="构建打包"><a href="#构建打包" class="headerlink" title="构建打包"></a>构建打包</h3><p>vue.config.js中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assetsDir: &#39;.&#x2F;&#39;&#x2F;&#x2F;assets文件夹与index.html同级</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="pack2.png"  alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assetsDir: &#39;static&#39;&#x2F;&#x2F;index.html与static同级，assets文件夹位于static内</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="pack2.png"  alt=""></p></li></ol><h4 id="需要更改-env-production-内的环境变量"><a href="#需要更改-env-production-内的环境变量" class="headerlink" title="需要更改.env.production 内的环境变量"></a>需要更改.env.production 内的环境变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VUE_APP_BASE_API = '/prod-api'</span></span><br><span class="line">VUE_APP_BASE_API = <span class="string">''</span><span class="comment">//改为空</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="prod-api.png"  alt=""></p><p>.env.production</p><p>应等待axios请求完毕后执行函数，否则数据未拉取就操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios</span><br><span class="line">    .get(<span class="string">'http://localhost:8080/getData'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="keyword">this</span>.covidData=response.data))<span class="comment">//箭头表达式正常存储数据</span></span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios</span><br><span class="line">    .get(<span class="string">'http://localhost:8080/getData'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.covidData=response.data;<span class="comment">//不能读取数据，提示covidData未定义</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>错误原因：</p><p>axios回调函数的内部的this并非指向当前的vue实例;</p><p><a href="https://www.cnblogs.com/stella1024/p/7598541.html" target="_blank" rel="noopener">https://www.cnblogs.com/stella1024/p/7598541.html</a></p><p>解决方法一：用在外部函数定义的变量存储的this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this=<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.$axios</span><br><span class="line">    .get(<span class="string">'http://localhost:8080/getData'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    _this.covidData=response.data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>解决方法二：用箭头函数</p><p>箭头函数内部的this是词法作用域，由上下文确定，指向的函数内部的this已经绑定了外部的vue实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$axios</span><br><span class="line">    .get(<span class="string">'http://localhost:8080/getData'</span>)</span><br><span class="line">    .then( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.covidData=response.data;</span><br><span class="line">    &#125;)     <span class="comment">//箭头函数&#123;&#125;即可</span></span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Server搭建私有gitblit服务器托管Hexo博客</title>
      <link href="/2020/04/06/hexo_windows/"/>
      <url>/2020/04/06/hexo_windows/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server搭建私有gitblit服务器托管Hexo博客"><a href="#Windows-Server搭建私有gitblit服务器托管Hexo博客" class="headerlink" title="Windows Server搭建私有gitblit服务器托管Hexo博客"></a>Windows Server搭建私有gitblit服务器托管Hexo博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　网上关于Hexo博客的部署教程很多，大都是托管在Github。虽然免费，但由于Github在外网，访问速度较慢。如果博客上有许多高清图片，访问时要等好一会才能加载出来，严重影响观感。</p><p>　　由此，萌生了在私有云服务器上托管Hexo博客的想法。网上找到的教程是在Linux系统服务器上搭建的，而我的云服务器系统是Windows Server 2012 R2（工作原因必须用），能不能按照同样的思路在Windows Server上搭建呢？</p><p>　　下面，跟大家分享我在Windows Server 2012 R2上搭建Git私库，配置Niginx静态资源Web服务，成功托管Hexo博客的经验。</p><h3 id="主要思路："><a href="#主要思路：" class="headerlink" title="主要思路："></a>主要思路：</h3><ol><li>在云服务器使用Gitblit搭建Git私库</li><li>搭建Nginx Web服务器，访问静态资源</li><li>配置Git钩子脚本，每次推送，自动将Hexo静态资源拷贝到Nginx默认主页目录</li></ol><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="使用Gitblit搭建Git私库"><a href="#使用Gitblit搭建Git私库" class="headerlink" title="使用Gitblit搭建Git私库"></a>使用Gitblit搭建Git私库</h3><h4 id="安装-JRE"><a href="#安装-JRE" class="headerlink" title="安装 JRE"></a>安装 JRE</h4><p>Gitblit 需要 Java运行环境，版本至少Java 7，JRE和JDK都行，为了精简我选的JRE 8</p><p>JRE 官方下载地址（注册后才能下载）： <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></p><h4 id="安装Gitblit"><a href="#安装Gitblit" class="headerlink" title="安装Gitblit"></a>安装Gitblit</h4><h5 id="官网下载Windows版压缩包：http-gitblit-github-io-gitblit"><a href="#官网下载Windows版压缩包：http-gitblit-github-io-gitblit" class="headerlink" title="官网下载Windows版压缩包：http://gitblit.github.io/gitblit/"></a>官网下载Windows版压缩包：<a href="http://gitblit.github.io/gitblit/" target="_blank" rel="noopener">http://gitblit.github.io/gitblit/</a></h5><img src="/" class="lazyload" data-src="Gitblit.JPG"  style="zoom:70%;" /><h5 id="解压后，修改-gitblit-1-9-0-data-defaults-properties-配置文件中的以下几项参数："><a href="#解压后，修改-gitblit-1-9-0-data-defaults-properties-配置文件中的以下几项参数：" class="headerlink" title="解压后，修改 gitblit-1.9.0/data/defaults.properties 配置文件中的以下几项参数："></a>解压后，修改 gitblit-1.9.0/data/defaults.properties 配置文件中的以下几项参数：</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git总仓库目录(会自动创建，但只能在gitblit根目录下)</span></span><br><span class="line"><span class="comment"># 我定义在 C:\Program Files\gitblit-1.9.0\gitRepository</span></span><br><span class="line"><span class="meta">git.repositoriesFolder</span> = <span class="string">gitRepository</span></span><br><span class="line"><span class="comment"># HTTP协议端口号（自定义端口号，记得在云服务器的防火墙开放自定义的端口，TCP协议即可）</span></span><br><span class="line"><span class="meta">server.httpPort</span> = <span class="string">12070</span></span><br><span class="line"><span class="comment"># HTTP协议传输数据的接口</span></span><br><span class="line"><span class="comment">#（默认localhost，网上大都教填公网IP，但我填了之后启动报错闪退，找到的解决办法是填空）</span></span><br><span class="line"><span class="comment"># 解决方法：https://blog.csdn.net/wwongcong/article/details/88567314</span></span><br><span class="line"><span class="meta">server.httpBindInterface</span> =<span class="string"></span></span><br></pre></td></tr></table></figure><h5 id="以管理员模式运行Gitblit根目录下的-gitblit-cmd-开启服务"><a href="#以管理员模式运行Gitblit根目录下的-gitblit-cmd-开启服务" class="headerlink" title="以管理员模式运行Gitblit根目录下的 gitblit.cmd 开启服务"></a>以管理员模式运行Gitblit根目录下的 gitblit.cmd 开启服务</h5><p>浏览器访问：<a href="http://localhost:自定义端口号/">http://localhost:自定义端口号/</a>　或　http://公网IP:自定义端口号/</p><p>即可进入Gitblit使用界面</p><p><img src="/" class="lazyload" data-src="gitblit_cmd.JPG"  alt=""></p><h5 id="将Gitblit服务器注册成系统服务，开机自启动"><a href="#将Gitblit服务器注册成系统服务，开机自启动" class="headerlink" title="将Gitblit服务器注册成系统服务，开机自启动"></a>将Gitblit服务器注册成系统服务，开机自启动</h5><p>修改Gitblit根目录下的 installServcie.cmd 文件中的几项参数：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 32位系统：x86 64位系统：amd64 </span></span><br><span class="line"><span class="attr">SET</span> <span class="string">ARCH=amd64</span></span><br><span class="line"><span class="comment"># Gitblit根目录</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">CD=C:\Program Files\gitblit-1.9.0</span></span><br><span class="line"><span class="comment"># 修改StartParams为空</span></span><br><span class="line"><span class="meta">--StartParams</span>=<span class="string">"" ^</span></span><br></pre></td></tr></table></figure><img src="/" class="lazyload" data-src="installService.JPG"  style="zoom:70%;" /><p>修改完参数后，以管理员运行installService.cmd 安装服务</p><p>然后打开 运行＝&gt; services.msc</p><p>就能在Windows服务管理策略里看到新注册的gitblit服务</p><img src="/" class="lazyload" data-src="gitblit_service.JPG"  alt="image-20200405011845990" style="zoom:80%;" /><img src="/" class="lazyload" data-src="gitblit_service2.JPG"  alt="image-20200406012825794" style="zoom:80%;" /><h4 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h4><h5 id="登录Gitblit管理员账号，修改密码"><a href="#登录Gitblit管理员账号，修改密码" class="headerlink" title="登录Gitblit管理员账号，修改密码"></a>登录Gitblit管理员账号，修改密码</h5><p>初始账号：admin，初始密码：admin</p><p><img src="/" class="lazyload" data-src="gitblit_login.JPG"  alt=""></p><p>一定要修改初始密码并牢记！！！</p><p>今后通过http协议推送Git仓库需要用到该密码，相当于Github的账号密码</p><p><img src="/" class="lazyload" data-src="gitblit_password.JPG"  alt=""></p><h5 id="创建Git仓库-1"><a href="#创建Git仓库-1" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h5><p>仓库名自定义，无需像托管在Github上时一样规定为username.github.io</p><img src="/" class="lazyload" data-src="gitblit_create.JPG"  alt="image-20200403212807119" style="zoom:60%;" /><h5 id="获取Git仓库地址"><a href="#获取Git仓库地址" class="headerlink" title="获取Git仓库地址"></a>获取Git仓库地址</h5><p>这里我选用http协议地址，是因为懒得在服务器防火墙再开放一个29418端口了</p><p>想要用ssh的，劳烦移步官网文档 <a href="http://gitblit.github.io/gitblit/setup_transport_ssh.html" target="_blank" rel="noopener">http://gitblit.github.io/gitblit/setup_transport_ssh.html</a></p><img src="/" class="lazyload" data-src="gitblit_repository.JPG"  alt="image-20200403212807119" style="zoom:80%;" /><h4 id="至此，Git私库搭建完成！"><a href="#至此，Git私库搭建完成！" class="headerlink" title="至此，Git私库搭建完成！"></a>至此，Git私库搭建完成！</h4><h3 id="搭建Nginx-Web服务器"><a href="#搭建Nginx-Web服务器" class="headerlink" title="搭建Nginx Web服务器"></a>搭建Nginx Web服务器</h3><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><p>官网下载Windows版压缩包：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><img src="/" class="lazyload" data-src="nginx_download.JPG"  alt="image-20200405013330255" style="zoom:70%;" /><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改Nginx 根目录的conf文件夹下的配置文件  <code>C:\Program Files\nginx-1.17.9\conf\nginx.conf</code></p><img src="/" class="lazyload" data-src="nginx_conf.JPG"  alt="image-20200406014354829" style="zoom:80%;" /><h4 id="启动测试Nginx"><a href="#启动测试Nginx" class="headerlink" title="启动测试Nginx"></a>启动测试Nginx</h4><p>双击nginx.exe，黑色弹窗一闪而过即为启动成功，关闭需在任务管理器结束进程。</p><p>访问测试页面 <code>http://localhost/</code></p><img src="/" class="lazyload" data-src="nginx_test.JPG"  alt="image-20200406013403238" style="zoom:90%;" /><h4 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h4><h5 id="下载WinSW"><a href="#下载WinSW" class="headerlink" title="下载WinSW"></a>下载WinSW</h5><p>WinSW下载地址： <a href="https://github.com/kohsuke/winsw/releases" target="_blank" rel="noopener">https://github.com/kohsuke/winsw/releases</a></p><p>WinSW.NET2.exe （适用于32位系统）</p><p>WinSW.NET4.exe （适用于64位系统。我下载这个版本）</p><h5 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h5><h6 id="将-WinSW-NET4-exe-复制到-C-Program-Files-nginx-1-17-9-Nginx-根目录中，重命名为-nginxservice-exe"><a href="#将-WinSW-NET4-exe-复制到-C-Program-Files-nginx-1-17-9-Nginx-根目录中，重命名为-nginxservice-exe" class="headerlink" title="将 WinSW.NET4.exe 复制到 C:\Program Files\nginx-1.17.9\ Nginx 根目录中，重命名为 nginxservice.exe"></a>将 <code>WinSW.NET4.exe</code> 复制到 <code>C:\Program Files\nginx-1.17.9\</code> Nginx 根目录中，重命名为 <code>nginxservice.exe</code></h6><h6 id="在与-nginxservice-exe-同目录中，新建一个-nginxservice-xml-文件（名字一定要与nginxservice-exe-名字前缀保持一致）"><a href="#在与-nginxservice-exe-同目录中，新建一个-nginxservice-xml-文件（名字一定要与nginxservice-exe-名字前缀保持一致）" class="headerlink" title="在与 nginxservice.exe 同目录中，新建一个 nginxservice.xml 文件（名字一定要与nginxservice.exe 名字前缀保持一致）"></a>在与 <code>nginxservice.exe</code> 同目录中，新建一个 <code>nginxservice.xml</code> 文件（名字一定要与<code>nginxservice.exe</code> 名字前缀保持一致）</h6><p><code>nginxservice.xml</code> 编写以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;service&gt;</span><br><span class="line">&lt;id&gt;nginx&lt;&#x2F;id&gt;</span><br><span class="line">&lt;name&gt;nginx&lt;&#x2F;name&gt;</span><br><span class="line">&lt;description&gt;nginx&lt;&#x2F;description&gt;</span><br><span class="line">&lt;logpath&gt;C:\Program Files\nginx-1.17.9&lt;&#x2F;logpath&gt;</span><br><span class="line">&lt;logmode&gt;roll&lt;&#x2F;logmode&gt;</span><br><span class="line">&lt;depend&gt;&lt;&#x2F;depend&gt;</span><br><span class="line">&lt;executable&gt;C:\Program Files\nginx-1.17.9\nginx.exe&lt;&#x2F;executable&gt;</span><br><span class="line">&lt;stopexecutable&gt;C:\Program Files\nginx-1.17.9\nginx.exe -s stop&lt;&#x2F;stopexecutable&gt;</span><br><span class="line">&lt;&#x2F;service&gt;</span><br></pre></td></tr></table></figure><p>请自行修改<logpath>、<executable>、<stopexecutable>为自己的Nginx 根目录</p><img src="/" class="lazyload" data-src="nginx_service.JPG"  alt="image-20200406011927319" style="zoom:90%;" /><p>用 <strong>管理员身份</strong> 运行 cmd ，cd 进入 <code>C:\Program Files\nginx-1.17.9</code> Nginx 根目录下，执行 <code>nginxservice.exe install</code> 命令。</p><p><img src="/" class="lazyload" data-src="nginx_service2.JPG"  alt="image-20200406012420521"></p><img src="/" class="lazyload" data-src="nginx_service3.JPG"  alt="image-20200406012538546" style="zoom:80%;" /><h3 id="配置Git钩子脚本"><a href="#配置Git钩子脚本" class="headerlink" title="配置Git钩子脚本"></a>配置Git钩子脚本</h3><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>　　Git钩子是在Git仓库中特定事件发生时自动运行的脚本。</p><p>　　这里我们需要配置一个脚本，每当我们向Git服务器推送Hexo博客静态资源文件时，脚本自动拷贝上传的的资源文件到Nginx Web服务器目录。</p><p>　　有小伙伴可能会提出，直接把Nginx Web服务器的默认主页目录指定到仓库目录不就行了吗？</p><p>​        这有一个误区，如果你翻找过服务端上的仓库目录，会发现根本找不到你所推送的文件！</p><p>　　这是因为Git是一个版本管理系统，而非文件系统。Git服务端存放的叫裸库（bare），不包含工作区（working place），推送到Git服务端的文件会以二进制的方式存储在仓库的objects文件夹中。</p><p>　　你需要在服务器上，像平时克隆仓库一样执行　git clone 仓库地址　才能获取到推送的文件。</p><p><img src="/" class="lazyload" data-src="git_file.JPG"  alt=""></p><p>　　我们要配置的钩子脚本就是要实现以上功能，而且并不需要额外安装 Git。</p><h4 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h4><h5 id="修改现成的钩子脚本"><a href="#修改现成的钩子脚本" class="headerlink" title="修改现成的钩子脚本"></a>修改现成的钩子脚本</h5><p>Gitblit 钩子脚本都放在 gitblit-1.9.0\data\groovy 目录下，要使用的脚本模板为localclone.groovy</p><p>拷贝一份，重命名为autoclone.groovy</p><p>修改 autoclone.groovy 中的：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动在此目录执行克隆代码，我这直接指向了Nginx的默认主页路径</span></span><br><span class="line"><span class="attr">def</span> <span class="string">rootFolder = 'C:/Program Files/nginx-1.17.9/html/'</span></span><br></pre></td></tr></table></figure><h5 id="给仓库配置脚本"><a href="#给仓库配置脚本" class="headerlink" title="给仓库配置脚本"></a>给仓库配置脚本</h5><p>浏览器进入Gitblit 管理界面 ＝&gt; blog版本库 ＝&gt; 编辑＝&gt; receive＝&gt; post-receive</p><p>选择刚才编写的autoclone脚本，保存</p><img src="/" class="lazyload" data-src="git_script.JPG"  alt="image-20200404025524747" style="zoom:70%;" /><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　在用于推送博客的电脑上，修改配置文件_config.yml，添加多Git仓库推送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git</span><br><span class="line">    gitblit: http:&#x2F;&#x2F;admin@公网IP:自定义端口&#x2F;r&#x2F;仓库名.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>　CMD执行hexo clean，hexo deploy命令</p><p>　因使用http协议，推送到Gitblit时会提示输入密码，密码就是登录Gitblit管理页面的admin用户密码。</p><p>　现在浏览器直接访问公网IP就能看到博客了，高清图片即时呈现，丝滑流畅<del>~</del></p><img src="/" class="lazyload" data-src="myblog.JPG"  alt="image-20200406020350893" style="zoom:60%;" />]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
