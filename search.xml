<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows Server搭建私有gitblit服务器托管Hexo博客</title>
      <link href="/2020/04/06/hexo_windows/"/>
      <url>/2020/04/06/hexo_windows/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server搭建私有gitblit服务器托管Hexo博客"><a href="#Windows-Server搭建私有gitblit服务器托管Hexo博客" class="headerlink" title="Windows Server搭建私有gitblit服务器托管Hexo博客"></a>Windows Server搭建私有gitblit服务器托管Hexo博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　网上关于Hexo博客的部署教程很多，大都是托管在Github。虽然免费，但由于Github在外网，访问速度较慢。如果博客上有许多高清图片，访问时要等好一会才能加载出来，严重影响观感。</p><p>　　由此，萌生了在私有云服务器上托管Hexo博客的想法。网上找到的教程是在Linux系统服务器上搭建的，而我的云服务器系统是Windows Server 2012 R2（工作原因必须用），能不能按照同样的思路在Windows Server上搭建呢？</p><p>　　下面，跟大家分享我在Windows Server 2012 R2上搭建Git私库，配置Niginx静态资源Web服务，成功托管Hexo博客的经验。</p><h3 id="主要思路："><a href="#主要思路：" class="headerlink" title="主要思路："></a>主要思路：</h3><ol><li>在云服务器使用Gitblit搭建Git私库</li><li>搭建Nginx Web服务器，访问静态资源</li><li>配置Git钩子脚本，每次推送，自动将Hexo静态资源拷贝到Nginx默认主页目录</li></ol><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="使用Gitblit搭建Git私库"><a href="#使用Gitblit搭建Git私库" class="headerlink" title="使用Gitblit搭建Git私库"></a>使用Gitblit搭建Git私库</h3><h4 id="安装-JRE"><a href="#安装-JRE" class="headerlink" title="安装 JRE"></a>安装 JRE</h4><p>Gitblit 需要 Java运行环境，版本至少Java 7，JRE和JDK都行，为了精简我选的JRE 8</p><p>JRE 官方下载地址（注册后才能下载）： <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></p><h4 id="安装Gitblit"><a href="#安装Gitblit" class="headerlink" title="安装Gitblit"></a>安装Gitblit</h4><h5 id="官网下载Windows版压缩包：http-gitblit-github-io-gitblit"><a href="#官网下载Windows版压缩包：http-gitblit-github-io-gitblit" class="headerlink" title="官网下载Windows版压缩包：http://gitblit.github.io/gitblit/"></a>官网下载Windows版压缩包：<a href="http://gitblit.github.io/gitblit/" target="_blank" rel="noopener">http://gitblit.github.io/gitblit/</a></h5><img src="/" class="lazyload" data-src="Gitblit.JPG"  style="zoom:70%;" /><h5 id="解压后，修改-gitblit-1-9-0-data-defaults-properties-配置文件中的以下几项参数："><a href="#解压后，修改-gitblit-1-9-0-data-defaults-properties-配置文件中的以下几项参数：" class="headerlink" title="解压后，修改 gitblit-1.9.0/data/defaults.properties 配置文件中的以下几项参数："></a>解压后，修改 gitblit-1.9.0/data/defaults.properties 配置文件中的以下几项参数：</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git总仓库目录(会自动创建，但只能在gitblit根目录下)</span></span><br><span class="line"><span class="comment"># 我定义在 C:\Program Files\gitblit-1.9.0\gitRepository</span></span><br><span class="line"><span class="meta">git.repositoriesFolder</span> = <span class="string">gitRepository</span></span><br><span class="line"><span class="comment"># HTTP协议端口号（自定义端口号，记得在云服务器的防火墙开放自定义的端口，TCP协议即可）</span></span><br><span class="line"><span class="meta">server.httpPort</span> = <span class="string">12070</span></span><br><span class="line"><span class="comment"># HTTP协议传输数据的接口</span></span><br><span class="line"><span class="comment">#（默认localhost，网上大都教填公网IP，但我填了之后启动报错闪退，找到的解决办法是填空）</span></span><br><span class="line"><span class="comment"># 解决方法：https://blog.csdn.net/wwongcong/article/details/88567314</span></span><br><span class="line"><span class="meta">server.httpBindInterface</span> =<span class="string"></span></span><br></pre></td></tr></table></figure><h5 id="以管理员模式运行Gitblit根目录下的-gitblit-cmd-开启服务"><a href="#以管理员模式运行Gitblit根目录下的-gitblit-cmd-开启服务" class="headerlink" title="以管理员模式运行Gitblit根目录下的 gitblit.cmd 开启服务"></a>以管理员模式运行Gitblit根目录下的 gitblit.cmd 开启服务</h5><p>浏览器访问：<a href="http://localhost:自定义端口号/">http://localhost:自定义端口号/</a>　或　http://公网IP:自定义端口号/</p><p>即可进入Gitblit使用界面</p><p><img src="/" class="lazyload" data-src="gitblit_cmd.JPG"  alt=""></p><h5 id="将Gitblit服务器注册成系统服务，开机自启动"><a href="#将Gitblit服务器注册成系统服务，开机自启动" class="headerlink" title="将Gitblit服务器注册成系统服务，开机自启动"></a>将Gitblit服务器注册成系统服务，开机自启动</h5><p>修改Gitblit根目录下的 installServcie.cmd 文件中的几项参数：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 32位系统：x86 64位系统：amd64 </span></span><br><span class="line"><span class="attr">SET</span> <span class="string">ARCH=amd64</span></span><br><span class="line"><span class="comment"># Gitblit根目录</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">CD=C:\Program Files\gitblit-1.9.0</span></span><br><span class="line"><span class="comment"># 修改StartParams为空</span></span><br><span class="line"><span class="meta">--StartParams</span>=<span class="string">"" ^</span></span><br></pre></td></tr></table></figure><img src="/" class="lazyload" data-src="installService.JPG"  style="zoom:70%;" /><p>修改完参数后，以管理员运行installService.cmd 安装服务</p><p>然后打开 运行＝&gt; services.msc</p><p>就能在Windows服务管理策略里看到新注册的gitblit服务</p><img src="/" class="lazyload" data-src="gitblit_service.JPG"  alt="image-20200405011845990" style="zoom:80%;" /><img src="/" class="lazyload" data-src="gitblit_service2.JPG"  alt="image-20200406012825794" style="zoom:80%;" /><h4 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h4><h5 id="登录Gitblit管理员账号，修改密码"><a href="#登录Gitblit管理员账号，修改密码" class="headerlink" title="登录Gitblit管理员账号，修改密码"></a>登录Gitblit管理员账号，修改密码</h5><p>初始账号：admin，初始密码：admin</p><p><img src="/" class="lazyload" data-src="gitblit_login.JPG"  alt=""></p><p>一定要修改初始密码并牢记！！！</p><p>今后通过http协议推送Git仓库需要用到该密码，相当于Github的账号密码</p><p><img src="/" class="lazyload" data-src="gitblit_password.JPG"  alt=""></p><h5 id="创建Git仓库-1"><a href="#创建Git仓库-1" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h5><p>仓库名自定义，无需像托管在Github上时一样规定为username.github.io</p><img src="/" class="lazyload" data-src="gitblit_create.JPG"  alt="image-20200403212807119" style="zoom:60%;" /><h5 id="获取Git仓库地址"><a href="#获取Git仓库地址" class="headerlink" title="获取Git仓库地址"></a>获取Git仓库地址</h5><p>这里我选用http协议地址，是因为懒得在服务器防火墙再开放一个29418端口了</p><p>想要用ssh的，劳烦移步官网文档 <a href="http://gitblit.github.io/gitblit/setup_transport_ssh.html" target="_blank" rel="noopener">http://gitblit.github.io/gitblit/setup_transport_ssh.html</a></p><img src="/" class="lazyload" data-src="gitblit_repository.jpg"  alt="image-20200403212807119" style="zoom:80%;" /><h4 id="至此，Git私库搭建完成！"><a href="#至此，Git私库搭建完成！" class="headerlink" title="至此，Git私库搭建完成！"></a>至此，Git私库搭建完成！</h4><h3 id="搭建Nginx-Web服务器"><a href="#搭建Nginx-Web服务器" class="headerlink" title="搭建Nginx Web服务器"></a>搭建Nginx Web服务器</h3><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><p>官网下载Windows版压缩包：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><img src="/" class="lazyload" data-src="nginx_download.JPG"  alt="image-20200405013330255" style="zoom:70%;" /><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改Nginx 根目录的conf文件夹下的配置文件  <code>C:\Program Files\nginx-1.17.9\conf\nginx.conf</code></p><img src="/" class="lazyload" data-src="nginx_conf.JPG"  alt="image-20200406014354829" style="zoom:80%;" /><h4 id="启动测试Nginx"><a href="#启动测试Nginx" class="headerlink" title="启动测试Nginx"></a>启动测试Nginx</h4><p>双击nginx.exe，黑色弹窗一闪而过即为启动成功，关闭需在任务管理器结束进程。</p><p>访问测试页面 <code>http://localhost/</code></p><img src="/" class="lazyload" data-src="nginx_test.JPG"  alt="image-20200406013403238" style="zoom:90%;" /><h4 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h4><h5 id="下载WinSW"><a href="#下载WinSW" class="headerlink" title="下载WinSW"></a>下载WinSW</h5><p>WinSW下载地址： <a href="https://github.com/kohsuke/winsw/releases" target="_blank" rel="noopener">https://github.com/kohsuke/winsw/releases</a></p><p>WinSW.NET2.exe （适用于32位系统）</p><p>WinSW.NET4.exe （适用于64位系统。我下载这个版本）</p><h5 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h5><h6 id="将-WinSW-NET4-exe-复制到-C-Program-Files-nginx-1-17-9-Nginx-根目录中，重命名为-nginxservice-exe"><a href="#将-WinSW-NET4-exe-复制到-C-Program-Files-nginx-1-17-9-Nginx-根目录中，重命名为-nginxservice-exe" class="headerlink" title="将 WinSW.NET4.exe 复制到 C:\Program Files\nginx-1.17.9\ Nginx 根目录中，重命名为 nginxservice.exe"></a>将 <code>WinSW.NET4.exe</code> 复制到 <code>C:\Program Files\nginx-1.17.9\</code> Nginx 根目录中，重命名为 <code>nginxservice.exe</code></h6><h6 id="在与-nginxservice-exe-同目录中，新建一个-nginxservice-xml-文件（名字一定要与nginxservice-exe-名字前缀保持一致）"><a href="#在与-nginxservice-exe-同目录中，新建一个-nginxservice-xml-文件（名字一定要与nginxservice-exe-名字前缀保持一致）" class="headerlink" title="在与 nginxservice.exe 同目录中，新建一个 nginxservice.xml 文件（名字一定要与nginxservice.exe 名字前缀保持一致）"></a>在与 <code>nginxservice.exe</code> 同目录中，新建一个 <code>nginxservice.xml</code> 文件（名字一定要与<code>nginxservice.exe</code> 名字前缀保持一致）</h6><p><code>nginxservice.xml</code> 编写以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;service&gt;</span><br><span class="line">&lt;id&gt;nginx&lt;&#x2F;id&gt;</span><br><span class="line">&lt;name&gt;nginx&lt;&#x2F;name&gt;</span><br><span class="line">&lt;description&gt;nginx&lt;&#x2F;description&gt;</span><br><span class="line">&lt;logpath&gt;C:\Program Files\nginx-1.17.9&lt;&#x2F;logpath&gt;</span><br><span class="line">&lt;logmode&gt;roll&lt;&#x2F;logmode&gt;</span><br><span class="line">&lt;depend&gt;&lt;&#x2F;depend&gt;</span><br><span class="line">&lt;executable&gt;C:\Program Files\nginx-1.17.9\nginx.exe&lt;&#x2F;executable&gt;</span><br><span class="line">&lt;stopexecutable&gt;C:\Program Files\nginx-1.17.9\nginx.exe -s stop&lt;&#x2F;stopexecutable&gt;</span><br><span class="line">&lt;&#x2F;service&gt;</span><br></pre></td></tr></table></figure><p>请自行修改<logpath>、<executable>、<stopexecutable>为自己的Nginx 根目录</p><img src="/" class="lazyload" data-src="nginx_service.JPG"  alt="image-20200406011927319" style="zoom:90%;" /><h6 id="用-管理员身份-运行-cmd-，cd-进入-C-Program-Files-nginx-1-17-9-Nginx-根目录下，执行-nginxservice-exe-install-命令。"><a href="#用-管理员身份-运行-cmd-，cd-进入-C-Program-Files-nginx-1-17-9-Nginx-根目录下，执行-nginxservice-exe-install-命令。" class="headerlink" title="用 管理员身份 运行 cmd ，cd 进入 C:\Program Files\nginx-1.17.9 Nginx 根目录下，执行 nginxservice.exe install 命令。"></a>用 <strong>管理员身份</strong> 运行 cmd ，cd 进入 <code>C:\Program Files\nginx-1.17.9</code> Nginx 根目录下，执行 <code>nginxservice.exe install</code> 命令。</h6><p><img src="/" class="lazyload" data-src="nginx_service2.JPG"  alt="image-20200406012420521"></p><img src="/" class="lazyload" data-src="nginx_service3.JPG"  alt="image-20200406012538546" style="zoom:80%;" /><h3 id="配置Git钩子脚本"><a href="#配置Git钩子脚本" class="headerlink" title="配置Git钩子脚本"></a>配置Git钩子脚本</h3><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>　　Git钩子是在Git仓库中特定事件发生时自动运行的脚本。</p><p>　　这里我们需要配置一个脚本，每当我们向Git服务器推送Hexo博客静态资源文件时，脚本自动拷贝上传的的资源文件到Nginx Web服务器目录。</p><p>　　有小伙伴可能会提出，直接把Nginx Web服务器的默认主页目录指定到仓库目录不就行了吗？</p><p>​        这有一个误区，如果你翻找过服务端上的仓库目录，会发现根本找不到你所推送的文件！</p><p>　　这是因为Git是一个版本管理系统，而非文件系统。Git服务端存放的叫裸库（bare），不包含工作区（working place），推送到Git服务端的文件会以二进制的方式存储在仓库的objects文件夹中。</p><p>　　你需要在服务器上，像平时克隆仓库一样执行　git clone 仓库地址　才能获取到推送的文件。</p><p><img src="/" class="lazyload" data-src="git_file.JPG"  alt="image-20200404022142918"></p><p>　　我们要配置的钩子脚本就是要实现以上功能，而且并不需要额外安装 Git。</p><h4 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h4><h5 id="修改现成的钩子脚本"><a href="#修改现成的钩子脚本" class="headerlink" title="修改现成的钩子脚本"></a>修改现成的钩子脚本</h5><p>Gitblit 钩子脚本都放在 gitblit-1.9.0\data\groovy 目录下，要使用的脚本模板为localclone.groovy</p><p>拷贝一份，重命名为autoclone.groovy</p><p>修改 autoclone.groovy 中的：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动在此目录执行克隆代码，我这直接指向了Nginx的默认主页路径</span></span><br><span class="line"><span class="attr">def</span> <span class="string">rootFolder = 'C:/Program Files/nginx-1.17.9/html/'</span></span><br></pre></td></tr></table></figure><h5 id="给仓库配置脚本"><a href="#给仓库配置脚本" class="headerlink" title="给仓库配置脚本"></a>给仓库配置脚本</h5><p>浏览器进入Gitblit 管理界面 ＝&gt; blog版本库 ＝&gt; 编辑＝&gt; receive＝&gt; post-receive</p><p>选择刚才编写的autoclone脚本，保存</p><img src="/" class="lazyload" data-src="git_script.JPG"  alt="image-20200404025524747" style="zoom:70%;" /><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>　　在用于推送博客的电脑上，修改配置文件_config.yml，添加多Git仓库推送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git</span><br><span class="line">    gitblit: http:&#x2F;&#x2F;admin@公网IP:自定义端口&#x2F;r&#x2F;仓库名.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>　CMD执行hexo clean，hexo deploy命令</p><p>　因使用http协议，推送到Gitblit时会提示输入密码，密码就是登录Gitblit管理页面的admin用户密码。</p><p>　现在浏览器直接访问公网IP就能看到博客了，高清图片即时呈现，丝滑流畅<del>~</del></p><img src="/" class="lazyload" data-src="myblog.JPG"  alt="image-20200406020350893" style="zoom:60%;" />]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
